<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Running_snail's Blog]]></title>
  <subtitle><![CDATA[Some notes about Web Front-End and others]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://snailsky.me/"/>
  <updated>2014-09-30T15:51:10.584Z</updated>
  <id>http://snailsky.me/</id>
  
  <author>
    <name><![CDATA[running_snail]]></name>
    <email><![CDATA[505324327@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T11:24:34.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<h4 id="yo">yo</h4>
<p>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>npm : 1.4.28<br>node : 0.10.32</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…<br>）<br>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"><br>yo的命令行操作<br>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"></p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等<br>官方文档有个 构建angular项目的例子<br>想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a><br><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈<br>我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。<br>哈哈 好像花了很小的代价，几条命令就构建出了一个架子呢~</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<p>在一个用yo做脚手架的项目中使用bower<br>创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a></p>
<p><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<p>我们试一下<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的<br><img src="/img/nodejs/yeomanstart18.png" alt="Yeoman的起步"><br>(好像没这个包呢… 之前点进去看说明文档的时候 名字好像不是这个)<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<p>grunt命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错 sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，惹毛我了，我把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，不想装ruby…</p>
<h3 id="运行yo_webapp">运行yo webapp</h3>
<p>我重新运行yo webapp从头开始，这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h3 id="grunt_test">grunt test</h3>
<p>试一下 grunt test<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再试试，test的文件<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”当然，当然等于… 这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<p>我们再试一下grunt命令（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"><br>default任务又依赖了些任务：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"><br>jshint：会帮你检查JavaScript代码中的错误，和一些潜在的问题</p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>test：就是测试你写的测试用例，用了mocha<br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"><br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br>build里面做了很多事：<br>clean：dist<br>dist：是一个生成用于发布的项目的文件夹<br>clean：dist 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"><br>wiredep：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"><br>useminPrepare:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"><br>concurrent 配置一些并行的任务，<br>concurrent:dist 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"><br>autoprefixer：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"><br>concat：合并文件<br>cssmin:压缩css文件<br>uglify：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"><br>copy ：复制一些东西<br>copy：dist 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"><br>rev：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"><br>usemin ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"><br>usemin-block 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"><br>htmlmin:压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"><br>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yeoman - 现代wepapp的脚手架(Getting started)]]></title>
    <link href="http://snailsky.me/2014/09/30/Yeoman-%E7%8E%B0%E4%BB%A3wepapp%E7%9A%84%E8%84%9A%E6%89%8B%E6%9E%B6-Getting-started/"/>
    <id>http://snailsky.me/2014/09/30/Yeoman-现代wepapp的脚手架-Getting-started/</id>
    <published>2014-09-30T09:42:23.000Z</published>
    <updated>2014-09-30T12:24:20.000Z</updated>
    <content type="html"><![CDATA[<p>这是一篇边学边记录的实践笔记，<br>我尽量详尽的记录了整个实验的过程，<br>包括失败的尝试及解决问题的过程，<br>让没使用过的人，可以知道怎么解决问题，<br>也让我再碰到同样问题时，可以方便地查到。<br>作为一名初学者，以一名初学者角度所记录的笔记，<br>比官方文档更详细且直观的记录，相信可以对其他初学者有益。</p>
<hr>
<h2 id="Yeoman是什么？">Yeoman是什么？</h2>
<p><strong>以下介绍翻译自<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></strong><br>Yeoman 帮助你创建个新项目，规定最佳实践和工具来帮助你保证项目富有生产性。</p>
<p>为了做到这样，我们提供了一个 generator（生产者） 生态系统。一个generator是一个脚手架的插件（我们可以用‘yo’命令来运行）用来完整你的项目或者构建有用的部分。</p>
<p>通过我们官方的generator，我们提出了”Yeoman 工作流”。这个工作流是一个健壮且固定的客户端栈，包括能帮助开发者快速建立完美的web应用的工具和框架。我们注意提供需要的来创建项目，屏蔽掉任何手动创建需要考虑的麻烦事儿。</p>
<p>用一个可以扩展的模块化的架构，我们利用成功的的案例和从几个开源社区学来的东西来保证这个开发人员使用的栈尽可能的智能化</p>
<p>作为一个坚信好的文档和卓越思想产生好的创建过程的团队，Yeoman还支持 lint，test，压缩及更多，因此开发者可以把注意力集中在解决问题上而不是担心这些小事情。</p>
<h3 id="工具">工具</h3>
<p>Yeoman 工作流由三种类型的工具组成 当你创建一个web app时可以提高你的生产力和满足感：</p>
<blockquote>
<p>脚手架工具   - yo<br>构建工具    - grunt、gulp、等等。<br>包管理工具  - 如 bower和npm</p>
</blockquote>
<h4 id="脚手架工具-yo">脚手架工具-yo</h4>
<p>yo 脚手架建立一个应用，<br>你可能需要为你的项目配置grunt文件、注册grunt任务、处理bower依赖</p>
<h4 id="构建工具-grunt、gulp">构建工具-grunt、gulp</h4>
<p>构建系统是被用来构建项目的，预览和测试你的项目，<br>grunt和gulp是两个时髦的选择</p>
<h4 id="包管理工具-bower和npm">包管理工具-bower和npm</h4>
<p>包管理工具被用做依赖管理，你不用再被迫的手动下载和管理你的脚本文件。bower和npm是两个时髦的选择</p>
<p>这三类工具被独立的开发和维护，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<hr>
<h2 id="Yeoman工作流">Yeoman工作流</h2>
<p>Yeoman工作流有三个核心工具组成：<br>yo - 脚手架工具（来自Yeoman）<br>bower - 包管理工具<br>grunt - 构建工具</p>
<p>这些项目彼此间是由他们各自的社区独立维护的，但是作为我们规定的工作流的一部分，他们可以在一起工作的很好，让你的工作更有效率。</p>
<p>让我们来看看这些东东能用来做神马<br><img src="/img/nodejs/yeomanstart1.png" alt="Yeoman的起步"></p>
<p><strong>yo</strong><br>yo是由Yeoman项目维护的，它提供web应用的脚手架，我们把可利用的脚手架模板称作generators，你可以通过npm典型的安装yo以及任何你想要并可以安装的generator。</p>
<hr>
<h2 id="用Yeoman搭建一个webapp的架子">用Yeoman搭建一个webapp的架子</h2>
<h3 id="安装yo和一些generator">安装yo和一些generator</h3>
<hr>
<p>以下实验环境为<br>windows7<br>node : 0.10.32<br>npm : 1.4.28<br>yo : 1.2.1<br>bower : 1.3.12<br>grunt-cli : 0.1.13<br>grunt : 0.4.5</p>
<p>关于node和npm的版本我已踩坑，给大家提个醒，如果你发现以下安装过程中出现类似错误：<br><img src="/img/nodejs/yeomanstart2.jpeg" alt="Yeoman的起步"><br>多半是因为node和npm该更新了…</p>
<hr>
<p>首先你需要安装yo和其他需要的工具</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g yo</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart3.png" alt="Yeoman的起步"><br>安装完成<br><img src="/img/nodejs/yeomanstart4.png" alt="Yeoman的起步"></p>
<h4 id="yo的命令行操作">yo的命令行操作</h4>
<p>1）通过help查看帮助<br><img src="/img/nodejs/yeomanstart5.png" alt="Yeoman的起步"><br>2）运行generator或查询yo的支持库<br><img src="/img/nodejs/yeomanstart5.jpg" alt="Yeoman的起步"><br>3）直接运行 yo webapp（generator的名字）</p>
<h3 id="基本脚手架">基本脚手架</h3>
<p>为了搭建一个web应用，你会需要安装 generator-webapp 这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g generator-webapp</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart6.png" alt="Yeoman的起步"></p>
<p>这是个默认的web应用 generator ，它会搭建出一个包含HTML5样板文件，jQuery，Modernizr，和 Bootstrap的项目。交互提示中你可以选择不要某些东西。</p>
<p>现在generator已经被安装了，为你的新项目创建一个目录</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">mkdir</span> <span class="keyword">my</span>-yo-project</div><div class="line">$ cd <span class="keyword">my</span>-yo-project</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart7.png" alt="Yeoman的起步"><br>并运行 yo webapp 即可安装webapp这个generator</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div></pre></td></tr></table></figure>

<p>webapp generator 被认为是创建web app最简单的一种开始。我们也提供一些框架generator 可以被用作脚手架来产生一个项目及后来的view，models，controller （MVC?）等等</p>
<p>（你可以使用generator-webapp，当然你也可以使用其他的generator。官方文档还有个构建angular项目的例子，想试一下看这里：<a href="http://yeoman.io/learning/" target="_blank" rel="external">GETTING STARTED WITH YEOMAN</a>）</p>
<p><img src="/img/nodejs/yeomanstart8.png" alt="Yeoman的起步"><br>绿点点是选中哈，我都选上了哈试试看(sass是需要ruby环境的，如果你的电脑里没安ruby，会报错，报错详情见下方 = = 当然如果你是在项目中要使用sass的就另当别论，此处只引领新手快速使用Yeoman建立一个demo，重点不在sass上)<br><img src="/img/nodejs/yeomanstart9.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart10.png" alt="Yeoman的起步"><br>报错了，不过好像是phantomjs包的问题。先不管嘛。</p>
<h3 id="Bower">Bower</h3>
<p>bower是一个为web提供的包管理工具，它可以让你为你的项目简单的管理依赖。这个包括一些有用的东西，如JavaScript，images ，CSS。它由Twitter和开源社区维护。</p>
<h4 id="Bower的命令行操作">Bower的命令行操作</h4>
<p>可以用以下命令实现用bower来管理包</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Search for a dependency in the Bower registry.</span></div><div class="line">$ bower search <span class="variable">&lt;dep&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># Install one or more dependencies.</span></div><div class="line">$ bower install <span class="variable">&lt;dep&gt;</span>..<span class="variable">&lt;depN&gt;</span></div><div class="line"></div><div class="line"><span class="comment"># List out the dependencies you have installed for a project.</span></div><div class="line">$ bower list</div><div class="line"></div><div class="line"><span class="comment"># Update a dependency to the latest version available.</span></div><div class="line">$ bower update <span class="variable">&lt;dep&gt;</span></div></pre></td></tr></table></figure>

<p>我随便试一下下，先试下搜索<br><img src="/img/nodejs/yeomanstart11.png" alt="Yeoman的起步"><br>查出来的结果实在是太多了….<br><img src="/img/nodejs/yeomanstart12.png" alt="Yeoman的起步"></p>
<p>试一下查看现在有啥包<br><img src="/img/nodejs/yeomanstart13.png" alt="Yeoman的起步"></p>
<h4 id="使用bower">使用bower</h4>
<p>在一个用yo做脚手架的项目中使用bower，创建一个基本的依赖于jquery插件的web app</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># Scaffold a <span class="keyword">new</span> application.</div><div class="line">$ yo webapp</div><div class="line"></div><div class="line"># Search Bower<span class="attribute">'s</span> registry <span class="keyword">for</span> the plug-<span class="keyword">in</span> we want.</div><div class="line">$ bower search jquery-pjax</div><div class="line"></div><div class="line"># Install it <span class="keyword">and</span> save it <span class="keyword">to</span> bower.json</div><div class="line">$ bower install jquery-pjax <span class="comment">--save</span></div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> using RequireJS...</div><div class="line"># (be aware that currently the webapp generator does <span class="keyword">not</span> include RequireJS <span class="keyword">and</span> the following command only applies <span class="keyword">to</span> generators that do)</div><div class="line">$ grunt bower</div><div class="line"># Injects your Bower dependencies into your RequireJS <span class="keyword">configuration</span>.</div><div class="line"></div><div class="line"># <span class="keyword">If</span> you<span class="attribute">'re</span> <span class="keyword">not</span> using RequireJS...</div><div class="line">$ grunt bowerInstall</div><div class="line"># Injects your dependencies into your index.html <span class="keyword">file</span>.</div></pre></td></tr></table></figure>

<hr>
<p>相关文档：<br><a href="https://github.com/yeoman/grunt-bower-requirejs" target="_blank" rel="external">grunt-bower-requirejs</a><br><a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-bower-install(这里官方应该没有及时更新，名字应该是grunt-wiredep才对)</a></p>
<hr>
<p>我们试着在使用yo做脚手架的项目中使用bower来为其添加个jquery-pjax的jquery插件<br><img src="/img/nodejs/yeomanstart14.png" alt="Yeoman的起步"></p>
<p>观察到bower.json里已经有了这个依赖 并且已经加到组件中咯<br><img src="/img/nodejs/yeomanstart15.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart16.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart17.png" alt="Yeoman的起步"></p>
<p>现在index.html中还没有bower的那些js的引用<br>先试一下文档上写的那个有误哈<br>我们按照<a href="https://github.com/stephenplusplus/grunt-wiredep" target="_blank" rel="external">grunt-wiredep文档</a>上面的指示照做</p>
<p>安装grunt-wiredep<br><img src="/img/nodejs/yeomanstart19.png" alt="Yeoman的起步"><br>我们要增加js依赖，所以在页面添加了</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- bower:js --&gt;</span></div><div class="line"><span class="comment">&lt;!-- endbower --&gt;</span></div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart20.png" alt="Yeoman的起步"><br>像酱紫<br><img src="/img/nodejs/yeomanstart21.png" alt="Yeoman的起步"><br>在这样执行命令<br>接下来我们发现在index.html文件已经添加进了js依赖<br><img src="/img/nodejs/yeomanstart22.png" alt="Yeoman的起步"><br>我们已经把bower.json文件里的依赖包涉及到的js全引过来了</p>
<h3 id="grunt">grunt</h3>
<p>grunt是一个为JavaScript项目服务的以任务为基础的命令行工具。他可以用来build项目，也暴露几个在你的工作流中用得到的命令。这些命令很多是利用由Yeoman团队来维护的grunt task。</p>
<h4 id="grunt的命令行操作">grunt的命令行操作</h4>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Preview an app you have generated (with Livereload).</span></div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"></div><div class="line"><span class="comment"># Run the unit tests for an app.</span></div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"></div><div class="line"><span class="comment"># Build an optimized, production-ready version of your app.</span></div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>这些命令可以和yo放在一起用，构成了一个无缝开发工作流</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>yo webapp</div><div class="line"><span class="variable">$ </span>grunt serve</div><div class="line"><span class="variable">$ </span>grunt test</div><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p>让我们先在gruntfile.js看一看 这些命令的细节</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt serve</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart23.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt test</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart24.png" alt="Yeoman的起步"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>grunt</div></pre></td></tr></table></figure>

<p><img src="/img/nodejs/yeomanstart25.png" alt="Yeoman的起步"></p>
<p>详细的自己去gruntfile.js里看吧，这么多东西都已经生成好了，我们只要直接用。</p>
<h4 id="运行grunt_serve">运行grunt serve</h4>
<p><img src="/img/nodejs/yeomanstart26.png" alt="Yeoman的起步"><br>有错，因为sass需要Ruby环境，我没有安装Ruby环境，所以sass会有问题<br>我们强制启动 grunt</p>
<p>不过还是有错，上面有个grunt-mocha没安是吧，好像是因为yo webapp时候phantomjs安装失败了，那我们就重新搞。把两个都安上<br><img src="/img/nodejs/yeomanstart27.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart28.png" alt="Yeoman的起步"></p>
<p>在纠结了n久终于不报错了<br><img src="/img/nodejs/yeomanstart29.png" alt="Yeoman的起步"><br>可是在那之后运行之后啥都没有也不报错，只有sass可能有问题了…<br>把gruntfile.js里所有带sass全部注释掉，再试试！<br><img src="/img/nodejs/yeomanstart30.png" alt="Yeoman的起步"></p>
<h4 id="端口被占用的解决方法">端口被占用的解决方法</h4>
<p>终于有反应了，说是9000端口被占用了，我们看看9000端口被什么占用了<br>先来查看下 9000端口所在程序的PID<br><img src="/img/nodejs/yeomanstart31.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart32.png" alt="Yeoman的起步"><br>就是这个4156，我们打开任务管理器看看这个PID对应的是什么程序<br><img src="/img/nodejs/yeomanstart33.png" alt="Yeoman的起步"></p>
<p>原来是我的酷狗，ORZ<br>先关掉酷狗吧，囧，其实你也可以改一下它默认的9000端口号<br><img src="/img/nodejs/yeomanstart34.png" alt="Yeoman的起步"><br>关了酷狗我们在任务管理器上面，找不到4156的应用了<br>所以我们试一下<br><img src="/img/nodejs/yeomanstart35.png" alt="Yeoman的起步"><br>这回终于一切正常，并且它自己打开了网页，当当当当~~<br><img src="/img/nodejs/yeomanstart36.png" alt="Yeoman的起步"><br>不过显示好像有点问题。<br><img src="/img/nodejs/yeomanstart37.png" alt="Yeoman的起步"><br>是个与CSS有关的错呀… 大概是和sass有关吧…<br>尝试把刚刚注释掉的sass相关的，再恢复下试试<br><img src="/img/nodejs/yeomanstart38.png" alt="Yeoman的起步"><br>给跪，又变成这样半死不活的状态了<br>好吧你赢了，我不用sass了还不行，暂时不想装ruby（虽然我知道你sass比less好用）…</p>
<h4 id="运行yo_webapp（success）">运行yo webapp（success）</h4>
<p>我重新运行yo webapp从头开始（直接在命令行里输入yo webapp就行了不需要删什么东西），<br>这次我重新选择我要的东西，这次我只选了bootstrap<br><img src="/img/nodejs/yeomanstart39.png" alt="Yeoman的起步"><br>并根据提示重写了相关配置文件<br><img src="/img/nodejs/yeomanstart40.png" alt="Yeoman的起步"><br>看起来一切正常<br>越挫越勇的偶，再次坚强的启动了任务<br><img src="/img/nodejs/yeomanstart41.png" alt="Yeoman的起步"><br>yeah，终于看到胜利的画面了！~真是太感动了∑(っ °Д °;)っ<br><img src="/img/nodejs/yeomanstart42.png" alt="Yeoman的起步"></p>
<h4 id="grunt_test">grunt test</h4>
<p>给没使写过test的朋友简单试一下grunt test （如果你使用过，以下是相当简单的，不用看了）<br>因为现在测试里面啥也没有，test.js文件里的内容现在是这样的<br><img src="/img/nodejs/yeomanstart43.png" alt="Yeoman的起步"><br>所以也不会有什么问题，一个空的测试全部通过<br><img src="/img/nodejs/yeomanstart44.png" alt="Yeoman的起步"><br>我们再修改test的文件试试<br><img src="/img/nodejs/yeomanstart45.png" alt="Yeoman的起步"><br>你可以这样写，我新增了一个测试用例，并判断这个“hello world”的字符串变量是不是等于<br>“hello world”，当然等于… 所以这是个必然会成功的测试用例，我们只是实验一下<br><img src="/img/nodejs/yeomanstart46.png" alt="Yeoman的起步"><br>结果和我们预想的一样，成功了，算上我新增的测试用例，两个测试用例都通过了测试。<br>接下来，写一个一定不会成功的测试，看看会怎样呢<br>这次我又新增了一个测试用例，这是个一定失败的测试用例<br><img src="/img/nodejs/yeomanstart47.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart48.png" alt="Yeoman的起步"><br><img src="/img/nodejs/yeomanstart49.png" alt="Yeoman的起步"><br>结果如我们预想，失败了，给出了提示信息，“oh no”== “oh”这里有问题，嘿嘿<br>1/3个测试失败</p>
<p>你现在一定也会写测试用例咯，当然如上实例其实是最简单的，可以去mocha的官方文档上查看更有用的写法哦，现在你可以开始写测试咯~</p>
<h4 id="运行grunt">运行grunt</h4>
<p>我们再试一下grunt命令<br>（以下你只需要运行grunt就行了，他一个命令做了很多事情，我把不同的任务截了图，方便对比）<br>看看grunt任务中做了什么事情，并对比运行结果~<br>grunt 就是这个default任务<br><img src="/img/nodejs/yeomanstart50.png" alt="Yeoman的起步"></p>
<h4 id="grunt命令实现任务功能详解">grunt命令实现任务功能详解</h4>
<p><strong>jshint</strong>：会帮你检查JavaScript代码中的错误，和一些潜在的问题<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart51.png" alt="Yeoman的起步"></p>
<p>运行结果：<br><img src="/img/nodejs/yeomanstart52.png" alt="Yeoman的起步"></p>
<hr>
<p><strong>test</strong>：就是测试你写的测试用例(此处使用的是mocha框架)<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart53.png" alt="Yeoman的起步"><br>运行结果：<br><img src="/img/nodejs/yeomanstart54.png" alt="Yeoman的起步"></p>
<hr>
<p>build里面做了很多事：<br>gruntfile.js：<br><img src="/img/nodejs/yeomanstart55.png" alt="Yeoman的起步"><br><strong>clean：dist</strong><br><strong>dist文件夹</strong>：是一个生成用于发布的项目的文件夹<br><strong>clean：dist</strong> 作用就是清空这个文件夹<br><img src="/img/nodejs/yeomanstart56.png" alt="Yeoman的起步"></p>
<p><strong>wiredep</strong>：这个你一定知道了，之前用过啦，将bower的js依赖文件写入index.html<br><img src="/img/nodejs/yeomanstart57.png" alt="Yeoman的起步"></p>
<p><strong>useminPrepare</strong>:分析文件并且完成配置，然后交给 usemin 来处理，但是多个入口文件时，无法自动完成配置，还是手动配置可靠,优点：如果用了require.js 会自己配置 build/static/scripts/vendor/requirejs/require.js 文件，方便（虽然我还没有用过require.js）<br><img src="/img/nodejs/yeomanstart58.png" alt="Yeoman的起步"></p>
<p><strong>concurrent</strong> 配置一些并行的任务，<br><strong>concurrent:dist</strong> 这里做了些事：复制了样式表，压缩image和svg<br><img src="/img/nodejs/yeomanstart59.png" alt="Yeoman的起步"></p>
<p><strong>autoprefixer</strong>：给样式添加浏览器供应商前缀<br><img src="/img/nodejs/yeomanstart60.png" alt="Yeoman的起步"></p>
<p><strong>concat</strong>：合并文件<br><strong>cssmin</strong>:压缩css文件<br><strong>uglify</strong>：压缩js文件<br>（自动生成的这部分被注释掉了，如果你不希望使用usemin blocks 这些需要被配置）<br><img src="/img/nodejs/yeomanstart61.png" alt="Yeoman的起步"></p>
<p><strong>copy</strong> ：复制一些东西<br><strong>copy：dist</strong> 复制一些文件到dist文件夹中<br><img src="/img/nodejs/yeomanstart62.png" alt="Yeoman的起步"></p>
<p><strong>rev</strong>：为要进行浏览器缓存的文件重命名<br><img src="/img/nodejs/yeomanstart63.png" alt="Yeoman的起步"></p>
<p><strong>usemin</strong> ：依据usemin-clock压缩css或js<br><img src="/img/nodejs/yeomanstart64.png" alt="Yeoman的起步"></p>
<p><strong>usemin-block</strong> 是像这样的 （详细文档:<a href="https://github.com/yeoman/grunt-usemin" target="_blank" rel="external">grunt-usemin</a>）<br><img src="/img/nodejs/yeomanstart65.png" alt="Yeoman的起步"></p>
<p><strong>htmlmin</strong> : 压缩html文件<br><img src="/img/nodejs/yeomanstart66.png" alt="Yeoman的起步"></p>
<p>运行结果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line">Running "clean:dist" (clean) task</div><div class="line">&gt;&gt; 1 path cleaned.</div><div class="line"></div><div class="line">Running "wiredep:app" (wiredep) task</div><div class="line"></div><div class="line">Running "useminPrepare:html" (useminPrepare) task</div><div class="line">Going through app/index.html to update the config</div><div class="line">Looking for build script HTML comment blocks</div><div class="line"></div><div class="line">Configuration is now:</div><div class="line"></div><div class="line">concat:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>css<span class="command">\\</span>bootstrap.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>jquery<span class="command">\\</span>dist<span class="command">\\</span>jquery.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>dist<span class="command">\\</span>js<span class="command">\\</span>bootstrap.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src:</div><div class="line"><span class="special">[</span> 'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>affix.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>alert.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>dropdown.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tooltip.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>modal.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>transition.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>button.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>popover.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>carousel.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>scrollspy.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>collapse.js',</div><div class="line">'bower_components<span class="command">\\</span>bootstrap<span class="command">\\</span>js<span class="command">\\</span>tab.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '<span class="special">{</span>app,.tmp<span class="special">}</span><span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">uglify:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>vendor.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>plugins.js' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>scripts<span class="command">\\</span>main.js',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>scripts<span class="command">\\</span>main.js' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">cssmin:</div><div class="line"><span class="special">{</span> generated:</div><div class="line"><span class="special">{</span> files:</div><div class="line"><span class="special">[</span> <span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>vendor.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>vendor.css' <span class="special">]</span> <span class="special">}</span>,</div><div class="line"><span class="special">{</span> dest: 'dist<span class="command">\\</span>styles<span class="command">\\</span>main.css',</div><div class="line">src: <span class="special">[</span> '.tmp<span class="command">\\</span>concat<span class="command">\\</span>styles<span class="command">\\</span>main.css' <span class="special">]</span> <span class="special">}</span> <span class="special">]</span> <span class="special">}</span> <span class="special">}</span></div><div class="line"></div><div class="line">Running "concurrent:dist" (concurrent) task</div><div class="line"></div><div class="line">Running "copy:styles" (copy) task</div><div class="line">Copied 1 files</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "imagemin:dist" (imagemin) task</div><div class="line">Minified 0 images (saved 0 B)</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "svgmin:dist" (svgmin) task</div><div class="line">Total saved: 0 B</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line">Running "autoprefixer:dist" (autoprefixer) task</div><div class="line">File .tmp/styles/main.css created.</div><div class="line"></div><div class="line">Running "concat:generated" (concat) task</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\vendor</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\styles</span><span class="command">\main</span>.css created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\vendor</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\plugins</span>.js created.</div><div class="line">File .tmp<span class="command">\concat</span><span class="command">\scripts</span><span class="command">\main</span>.js created.</div><div class="line"></div><div class="line">Running "cssmin:generated" (cssmin) task</div><div class="line">File dist<span class="command">\styles</span><span class="command">\vendor</span>.css created: 132.55 kB → 108.57 kB</div><div class="line">File dist<span class="command">\styles</span><span class="command">\main</span>.css created: 1.45 kB → 735 B</div><div class="line"></div><div class="line">Running "uglify:generated" (uglify) task</div><div class="line"></div><div class="line">Running "copy:dist" (copy) task</div><div class="line">Copied 8 files</div><div class="line"></div><div class="line">Running "rev:dist" (rev) task</div><div class="line">dist/scripts/main.js &gt;&gt; b6c3df09.main.js</div><div class="line">dist/scripts/plugins.js &gt;&gt; cb7562c6.plugins.js</div><div class="line">dist/scripts/vendor.js &gt;&gt; 327c4595.vendor.js</div><div class="line">dist/styles/main.css &gt;&gt; a5896f90.main.css</div><div class="line">dist/styles/vendor.css &gt;&gt; 9c307a9d.vendor.css</div><div class="line">dist/favicon.ico &gt;&gt; 6df2b309.favicon.ico</div><div class="line"></div><div class="line">Running "usemin:html" (usemin) task</div><div class="line"></div><div class="line">Processing as HTML - dist/index.html</div><div class="line">Update the HTML to reference our concat/min/revved script files</div><div class="line">&lt;script src="scripts/vendor.js" changed to &lt;script src="scripts/327c4595.vendor.</div><div class="line">js"</div><div class="line">&lt;script src="scripts/plugins.js" changed to &lt;script src="scripts/cb7562c6.plugin</div><div class="line">s.js"</div><div class="line">&lt;script src="scripts/main.js" changed to &lt;script src="scripts/b6c3df09.main.js"</div><div class="line">Update the HTML with the new css filenames</div><div class="line">&lt;link rel="shortcut icon" href="/favicon.ico" changed to &lt;link rel="shortcut ico</div><div class="line">n" href="/6df2b309.favicon.ico"</div><div class="line">&lt;link rel="stylesheet" href="styles/vendor.css" changed to &lt;link rel="stylesheet</div><div class="line">" href="styles/9c307a9d.vendor.css"</div><div class="line">&lt;link rel="stylesheet" href="styles/main.css" changed to &lt;link rel="stylesheet"</div><div class="line">href="styles/a5896f90.main.css"</div><div class="line">Update the HTML with the new img filenames</div><div class="line">Update the HTML with the new video filenames</div><div class="line">Update the HTML with the new poster filenames</div><div class="line">Update the HTML with the new source filenames</div><div class="line">Update the HTML with data-main tags</div><div class="line">Update the HTML with data-* tags</div><div class="line">Update the HTML with background imgs, case there is some inline style</div><div class="line">Update the HTML with anchors images</div><div class="line">Update the HTML with reference in input</div><div class="line">Update the HTML with the new img filenames in meta tags</div><div class="line">Update the HTML with the new object filenames</div><div class="line">Update the HTML with the new image filenames for svg xlink:href links</div><div class="line">Update the HTML with the new image filenames for src links</div><div class="line"></div><div class="line">Running "usemin:css" (usemin) task</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/9c307a9d.vendor.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Processing as CSS - dist/styles/a5896f90.main.css</div><div class="line">Update the CSS to reference our revved images</div><div class="line"></div><div class="line">Running "htmlmin:dist" (htmlmin) task</div><div class="line">Minified dist/index.html 2.51 kB → 2.14 kB</div><div class="line"></div><div class="line">Done, without errors.</div><div class="line"></div><div class="line"></div><div class="line">Execution Time (2014-09-30 07:31:12 UTC)</div><div class="line">loading tasks 4.4s ███████ 16<span class="comment">%</span></div><div class="line">concurrent:test 5.5s █████████ 20<span class="comment">%</span></div><div class="line">connect:test 482ms █ 2<span class="comment">%</span></div><div class="line">mocha:all 7.2s ████████████ 26<span class="comment">%</span></div><div class="line">wiredep:app 627ms █ 2<span class="comment">%</span></div><div class="line">concurrent:dist 4.3s ███████ 15<span class="comment">%</span></div><div class="line">cssmin:generated 286ms █ 1<span class="comment">%</span></div><div class="line">uglify:generated 4.4s ███████ 16<span class="comment">%</span></div><div class="line">Total 28.1s</div></pre></td></tr></table></figure>

<p>至此，我们已经成功建立了一个使用yeoman创建的webapp，且分析了，生成的配置文件，你也可以根据需要自己增加一些东西。想了解更多请去<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a>看吧，之后我也会更新关于Yeoman制作webapp或其他玩意儿的博文，请关注，O(∩_∩)O。</p>
<hr>
<p>参考文献：<br><a href="http://yeoman.io/" target="_blank" rel="external">Yeoman官方文档</a></p>
]]></content>
    
    
      <category term="Node.js" scheme="http://snailsky.me/tags/Node-js/"/>
    
      <category term="yeoman" scheme="http://snailsky.me/tags/yeoman/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="新手教程" scheme="http://snailsky.me/tags/%E6%96%B0%E6%89%8B%E6%95%99%E7%A8%8B/"/>
    
      <category term="Node.js" scheme="http://snailsky.me/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript事件处理程序与事件代理]]></title>
    <link href="http://snailsky.me/2014/09/17/JavaScript%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%E4%B8%8E%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86/"/>
    <id>http://snailsky.me/2014/09/17/JavaScript事件处理程序与事件代理/</id>
    <published>2014-09-17T07:18:17.000Z</published>
    <updated>2014-09-20T11:33:41.000Z</updated>
    <content type="html"><![CDATA[<p>总结DOM中和IE中事件对象的属性和方法；<br>封装一个通用的事件处理类；<br>理解事件代理</p>
<p>在此备忘，方便查询使用 O(∩_∩)O</p>
<hr>
<h2 id="事件对象">事件对象</h2>
<h3 id="DOM中的事件对象（常用的）">DOM中的事件对象（常用的）</h3>
<p><strong>type属性 用于获取事件类型</strong></p>
<blockquote>
<p>event.type</p>
</blockquote>
<p><strong>target属性 用于获取事件目标</strong></p>
<blockquote>
<p>event.target</p>
</blockquote>
<p>你也可以获取事件目标的节点名称</p>
<blockquote>
<p>event.target.nodeName</p>
</blockquote>
<p><strong>stopPropagation()方法 用于阻止事件冒泡</strong></p>
<blockquote>
<p>event.stopPropagation()</p>
</blockquote>
<p><strong>preventDefault()方法  阻止事件的默认行为</strong></p>
<blockquote>
<p>event.preventDefault()</p>
</blockquote>
<p>tip:默认行为是什么？<br>例如 a标签<br>&lt;a href=”#”&gt;超链接&lt;/a&gt;<br>的默认行为就是跳转。</p>
<p>阻止a的默认行为就是阻止a跳转。</p>
<h3 id="IE中的事件对象（常用的）">IE中的事件对象（常用的）</h3>
<p><strong>type属性 用于获取事件类型</strong></p>
<blockquote>
<p>event.type</p>
</blockquote>
<p><strong>srcElement属性 用于获取事件目标</strong></p>
<blockquote>
<p>event.srcElement</p>
</blockquote>
<p><strong>cancelBubble属性 用于阻止事件冒泡</strong><br>设置为true表示阻止冒泡</p>
<blockquote>
<p>event.cancelBubble=true</p>
</blockquote>
<p>设置为false表示不阻止冒泡</p>
<blockquote>
<p>event.cancelBubble=false</p>
</blockquote>
<p><strong>returnValue属性  阻止事件的默认行为</strong><br>默认为true<br>设置为false表示阻止事件的默认行为</p>
<blockquote>
<p>event.returnValue=false</p>
</blockquote>
<p><strong>关于event</strong>：<br>IE8之前的浏览器event要这样获取：</p>
<blockquote>
<p>window.event</p>
</blockquote>
<p>因此我们的event这样获取便可兼容所有浏览器：</p>
<blockquote>
<p>event = event || window.event</p>
</blockquote>
<hr>
<h2 id="跨浏览器事件处理程序">跨浏览器事件处理程序</h2>
<h3 id="通用事件处理文件">通用事件处理文件</h3>
<p>此封装了一个事件处理程序函数，此函数应用了能力检测来满足不同浏览器。<br>将此函数放到一个js文件里，需要绑定事件时引用此文件，可处理所有的事件绑定。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//    跨浏览器事件处理工具</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> eventUtil = {</div><div class="line">    <span class="comment">//    添加事件</span></div><div class="line">    addHandler:<span class="function"><span class="keyword">function</span><span class="params">(element,type,handler)</span></span>{</div><div class="line">        <span class="keyword">if</span>(element.addEventListener){     <span class="comment">// DOM2级事件处理</span></div><div class="line">            element.addEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(element.attachEvent){    <span class="comment">// IE事件处理</span></div><div class="line">            element.attachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        }<span class="keyword">else</span>{    <span class="comment">//DOM0级事件处理</span></div><div class="line">            element[<span class="string">"on"</span>+type]=handler;</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">//    删除事件</span></div><div class="line">    removeHandler:<span class="function"><span class="keyword">function</span><span class="params">(element,type,handler)</span></span>{</div><div class="line">        <span class="keyword">if</span>(element.removeEventListener){    <span class="comment">// DOM2级事件处理</span></div><div class="line">             element.removeEventListener(type,handler,<span class="literal">false</span>);</div><div class="line">        }<span class="keyword">else</span> <span class="keyword">if</span>(element.detachEvent){    <span class="comment">// IE事件处理</span></div><div class="line">            element.detachEvent(<span class="string">"on"</span>+type,handler);</div><div class="line">        }<span class="keyword">else</span>{    <span class="comment">//DOM0级事件处理</span></div><div class="line">            element[<span class="string">"on"</span>+type]=<span class="literal">null</span>;</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">//    获取事件对象</span></div><div class="line">    getEvent:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">return</span> event?event:<span class="built_in">window</span>.event;</div><div class="line">    },</div><div class="line">    <span class="comment">//    获取事件类型</span></div><div class="line">    getType:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">return</span> event.type;</div><div class="line">    },</div><div class="line">    <span class="comment">//    获取事件目标</span></div><div class="line">    getElement:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">    },</div><div class="line">    <span class="comment">//    阻止默认行为</span></div><div class="line">    preventDefault:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">if</span>(event.preventDefault){</div><div class="line">            event.preventDefault();</div><div class="line">        }<span class="keyword">else</span>{</div><div class="line">            event.returnValue=<span class="literal">false</span>;</div><div class="line">        }</div><div class="line">    },</div><div class="line">    <span class="comment">//    阻止冒泡</span></div><div class="line">    stopPropagation:<span class="function"><span class="keyword">function</span><span class="params">(event)</span></span>{</div><div class="line">        <span class="keyword">if</span>(event.stopPropagation){</div><div class="line">            event.stopPropagation();</div><div class="line">        }<span class="keyword">else</span>{</div><div class="line">            event.cancelBubble=<span class="literal">true</span>;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="用法">用法</h3>
<p>引用包含上述代码的文件，我们现在可以使用它来给我们的程序添加事件了~<br>例：我们来给一个按钮绑定一个弹出“hello world”的事件</p>
<p>HTML：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="variable">type=</span><span class="string">"button"</span> <span class="variable">value=</span><span class="string">"按钮"</span> <span class="variable">id=</span><span class="string">"button"</span>&gt;</div></pre></td></tr></table></figure>

<p>JS:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> btn=<span class="built_in">document</span>.getElementById(<span class="string">"button"</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showMes</span><span class="params">()</span></span>{</div><div class="line">    alert(<span class="string">"hello world"</span>);</div><div class="line">}</div><div class="line"><span class="comment">//  添加事件</span></div><div class="line">eventUtil.addHandler(btn,<span class="string">"click"</span>,showMes);</div><div class="line"><span class="comment">//  删除事件</span></div><div class="line">eventUtil.removeHandler(btn,<span class="string">"click"</span>,showMes);</div></pre></td></tr></table></figure>

<p>测试一下，chrome和IE都没有问题，你可以试一下更低的版本，都OK。</p>
<hr>
<h2 id="事件代理">事件代理</h2>
<h3 id="什么是事件代理？">什么是事件代理？</h3>
<p>当我们需要对很多元素添加事件的时候，可以通过将事件添加到它们的父节点而将事件委托给父节点来触发处理函数。</p>
<p>例：假设有一个 UL 的父节点，包含了很多个 Li 的子节点</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"parent-list"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-1"</span>&gt;</span>Item 1<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-2"</span>&gt;</span>Item 2<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-3"</span>&gt;</span>Item 3<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-4"</span>&gt;</span>Item 4<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-5"</span>&gt;</span>Item 5<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">id</span>=<span class="value">"post-6"</span>&gt;</span>Item 6<span class="tag">&lt;/<span class="title">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></div></pre></td></tr></table></figure>

<p>当我们的鼠标移到Li上的时候，需要获取此Li的相关信息并飘出悬浮窗以显示详细信息，或者当某个Li被点击的时候需要触发相应的处理事件。<br>我们通常的写法，是为每个Li都添加一些类似onMouseOver或者onClick之类的事件监听。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> addListeners4Li(liNode){</div><div class="line">    liNode.onclick = <span class="keyword">function</span> clickHandler(){<span class="keyword">...</span>};</div><div class="line">    liNode.onmouseover = <span class="keyword">function</span> mouseOverHandler(){<span class="keyword">...</span>}</div><div class="line">}</div><div class="line"></div><div class="line">window.onload = <span class="keyword">function</span>(){</div><div class="line">    var ulNode = document.getElementById(<span class="string">"parent-list"</span>);</div><div class="line">    var liNodes = ulNode.getElementByTagName(<span class="string">"Li"</span>);</div><div class="line">    <span class="keyword">for</span>(var i=<span class="number">0</span>, l = liNodes.length; i &lt; l; i++){</div><div class="line">        addListeners4Li(liNodes[i]);</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果这个UL中的Li子元素会频繁地添加或者删除，我们就需要在每次添加Li的时候都调用这个addListeners4Li方法来为每个Li节点添加事件处理函数。这就添加的复杂度和出错的可能性。</p>
<p>更简单的方法是使用事件代理机制，当事件被抛到更上层的父节点的时候，我们通过检查事件的目标对象（target）来判断并获取事件源Li。下面的代码可以完成我们想要的效果：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取父节点，并为它添加一个click事件</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"parent-list"</span>).addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">  <span class="comment">// 检查事件源e.targe是否为Li</span></div><div class="line">  <span class="keyword">if</span>(e.target && e.target.nodeName.toUpperCase == <span class="string">"LI"</span>) {</div><div class="line">    <span class="comment">// 真正的处理过程在这里</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"List item "</span>,e.target.id.replace(<span class="string">"post-"</span>),<span class="string">" was clicked!"</span>);</div><div class="line">  }</div><div class="line">});</div></pre></td></tr></table></figure>

<p>为父节点添加一个click事件，当子节点被点击的时候，click事件会从子节点开始向上冒泡。父节点捕获到事件之后，通过判断e.target.nodeName来判断是否为我们需要处理的节点。并且通过e.target拿到了被点击的Li节点。从而可以获取到相应的信息，并作处理。</p>
<h3 id="在JavaScript编程中使用代理">在JavaScript编程中使用代理</h3>
<p>上面介绍的是对DOM事件处理时，利用浏览器冒泡机制为DOM元素添加事件代理。其实在纯JS编程中，我们也可以使用这样的编程模式，来创建代理对象来操作目标对象。这里引用司徒正美相关文章中的一个例子：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> delegate = <span class="function"><span class="keyword">function</span><span class="params">(client, clientMethod)</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">return</span> clientMethod.apply(client, <span class="built_in">arguments</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">var</span> ClassA = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">var</span> _color = <span class="string">"red"</span>;</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        getColor: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"Color: "</span> + _color);</div><div class="line">        },</div><div class="line">        setColor: <span class="function"><span class="keyword">function</span><span class="params">(color)</span> </span>{</div><div class="line">            _color = color;</div><div class="line">        }</div><div class="line">    };</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ClassA();</div><div class="line">a.getColor();</div><div class="line">a.setColor(<span class="string">"green"</span>);</div><div class="line">a.getColor();</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"执行代理！"</span>);</div><div class="line"><span class="keyword">var</span> d = delegate(a, a.setColor);</div><div class="line">d(<span class="string">"blue"</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"执行完毕！"</span>);</div><div class="line">a.getColor();</div></pre></td></tr></table></figure>

<p>上面的例子中，通过调用delegate()函数创建的代理函数d来操作对a的修改。这种方式尽管是使用了apply（call也可以）来实现了调用对象的转移，但是从编程模式上实现了对某些对象的隐藏，可以保护这些对象不被随便访问和修改。</p>
<p>用js函数的apply方法来制定执行作用域，可以解决很多问题。</p>
<h3 id="jQuery中delegate函数">jQuery中delegate函数</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#link-list"</span>).delegate(<span class="string">"a"</span>, <span class="string">"click"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">  <span class="comment">// "$(this)" is the node that was clicked</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"you clicked a link!"</span>,$(<span class="keyword">this</span>));</div><div class="line">});</div></pre></td></tr></table></figure>

<p>jQuery的delegate的方法需要三个参数，一个选择器，一个时间名称，和事件处理函数。</p>
<p><strong>优点</strong></p>
<p>1.管理的函数变少了。不需要为每个元素都添加监听函数。对于同一个父节点下面类似的子元素，可以通过委托给父元素的监听函数来处理事件。</p>
<p>2.可以方便地动态添加和修改元素，不需要因为元素的改动而修改事件绑定。</p>
<p>3.JavaScript和DOM节点之间的关联变少了，这样也就减少了因循环引用而带来的内存泄漏发生的概率。</p>
<hr>
<p>参考文献：<br><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="external">[1] JavaScript高级程序设计（第3版）- 事件</a><br><a href="http://www.cnblogs.com/owenChen/archive/2013/02/18/2915521.html" target="_blank" rel="external">[2] JavaScript事件代理和委托（Delegation）</a></p>
]]></content>
    
    
      <category term="JavaScript" scheme="http://snailsky.me/tags/JavaScript/"/>
    
      <category term="总结" scheme="http://snailsky.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="跨浏览器" scheme="http://snailsky.me/tags/%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="JavaScript" scheme="http://snailsky.me/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【JS】JavaScript 中 this 是如何工作的？]]></title>
    <link href="http://snailsky.me/2014/08/31/javascript-%E4%B8%AD-this-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F/"/>
    <id>http://snailsky.me/2014/08/31/javascript-中-this-是如何工作的？/</id>
    <published>2014-08-30T16:13:42.000Z</published>
    <updated>2014-09-16T07:37:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="this关键字的含义">this关键字的含义</h2>
<p>简单说，this就是指当前函数的运行环境。由于JavaScript支持运行环境的动态切换，所以this的指向是动态的。<br>所谓“运行环境”其实就是对象。可以理解成，this指函数运行时所在的那个对象。</p>
<p>例：有一个函数f，它同时充当a对象和b对象的方法。JavaScript允许函数f的运行环境动态切换，即一会属于a对象，一会属于b对象，这就要靠this关键字来办到。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>{ <span class="built_in">console</span>.log(<span class="keyword">this</span>.x); };</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = {x:<span class="string">'a'</span>};</div><div class="line">a.m = f;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = {x:<span class="string">'b'</span>};</div><div class="line">b.m = f;</div><div class="line"></div><div class="line">a.m() <span class="comment">// a</span></div><div class="line">b.m() <span class="comment">// b</span></div></pre></td></tr></table></figure>

<p>当f属于a对象时，this指向a；当f属于b对象时，this指向b，因此打印出了不同的值。由于this的指向可变，所以达到了运行环境动态切换的目的。</p>
<h2 id="this在不同情况下，指向各不相同">this在不同情况下，指向各不相同</h2>
<h3 id="全局环境/函数调用">全局环境/函数调用</h3>
<p>在全局环境使用this，它指的就是顶层对象window。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></div><div class="line">}</div><div class="line">f();</div></pre></td></tr></table></figure>

<p>不管是不是在函数内部，只要是在全局环境下运行，this就是指全局对象window。</p>
<h3 id="构造函数">构造函数</h3>
<p>构造函数中的this，指的是实例对象。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> O = <span class="function"><span class="keyword">function</span><span class="params">(p)</span> </span>{</div><div class="line">    <span class="keyword">this</span>.p = p;</div><div class="line">};</div><div class="line"></div><div class="line">O.prototype.m = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.p;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">// test</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> O(<span class="string">"test case 1"</span>);</div><div class="line"><span class="built_in">console</span>.log ( a.p ); <span class="comment">// test case 1</span></div><div class="line"><span class="built_in">console</span>.log ( a.m() ); <span class="comment">// test case 1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> O(<span class="string">"test case 2"</span>);</div><div class="line"><span class="built_in">console</span>.log ( b.p ); <span class="comment">// test case 2</span></div><div class="line"><span class="built_in">console</span>.log ( b.m() ); <span class="comment">// test case 2</span></div></pre></td></tr></table></figure>

<p>上面代码定义了一个构造函数O。由于this指向实例对象，所以在构造函数内部定义this.p，就相当于定义实例对象有一个p属性；然后m方法可以返回这个p属性。</p>
<h3 id="方法调用">方法调用</h3>
<p>当a对象的方法被赋予b对象，该方法就变成了普通函数，其中的this就从指向a对象变成了指向b对象。这就是this取决于运行时所在的对象的含义，所以要特别小心。如果将某个对象的方法赋值给另一个对象，会改变this的指向。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o1.m = <span class="number">1</span>;</div><div class="line">o1.f = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{ <span class="built_in">console</span>.log(<span class="keyword">this</span>.m);};</div><div class="line"></div><div class="line">o1.f() <span class="comment">// 1</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o2.m = <span class="number">2</span>;</div><div class="line">o2.f = o1.f</div><div class="line"></div><div class="line">o2.f() <span class="comment">// 2</span></div></pre></td></tr></table></figure>

<p>f是o1的方法，但是如果在o2上面调用这个方法，f方法中的this就会指向o2。这就说明JavaScript函数的运行环境完全是动态绑定的，可以在运行时切换。</p>
<p>如果不想改变this的指向，可以将o2.f改写成下面这样。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="transposed_variable">o2.</span>f = <span class="function"><span class="keyword">function</span> <span class="params">()</span>{ <span class="title">o1</span>.<span class="title">f</span><span class="params">()</span> };</span></div><div class="line"></div><div class="line"><span class="transposed_variable">o2.</span>f() <span class="comment">// 1</span></div></pre></td></tr></table></figure>

<p>上面代码表示，由于f方法这时是在o1下面运行，所以this就指向o1。</p>
<p>有时，某个方法位于多层对象的内部，这时如果为了简化书写，把该方法赋值给一个变量，往往会得到意想不到的结果。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*会得到一个意外的答案*/</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = {</div><div class="line">        b : {</div><div class="line">            m : <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.p);</div><div class="line">            },</div><div class="line">            p : <span class="string">'Hello'</span></div><div class="line">        }</div><div class="line">};</div><div class="line"></div><div class="line"><span class="keyword">var</span> hello = a.b.m;</div><div class="line">hello(); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p>上面代码表示，m属于多层对象内部的一个方法。为求简写，将其赋值给hello变量，结果调用时，<strong>this指向了全局对象</strong>。<br>为了避免这个问题，可以<strong>只将m所在的对象赋值给hello</strong>，这样调用时，this的指向就不会变。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> hello = a.b;</div><div class="line">hello.m() <span class="comment">// Hello</span></div></pre></td></tr></table></figure>

<h3 id="Node-js">Node.js</h3>
<p>在Node.js中，this的指向又分成两种情况。全局环境中，this指向<a href="http://nodejs.org/api/globals.html" target="_blank" rel="external">全局对象global</a>；模块环境中，this指向module.exports。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 全局环境</span></div><div class="line"><span class="keyword">this</span> === global <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// 模块环境</span></div><div class="line"><span class="keyword">this</span> === <span class="built_in">module</span>.exports <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p>在浏览器环境下，最高作用域是global作用域，这意味着变量会定义在全局变量下。<br>而在Node下，最高最高作用域不是global作用域，定义的变量属于Node模块。<br>在Node.js中怎样使用全局变量：<a href="http://stackoverflow.com/questions/10987444/how-to-use-global-variable-in-node-js" target="_blank" rel="external">http://stackoverflow.com/questions/10987444/how-to-use-global-variable-in-node-js</a></p>
<h2 id="使用this你需要注意">使用this你需要注意</h2>
<h3 id="一个常见的误解">一个常见的误解</h3>
<h4 id="避免多层this-例一">避免多层this-例一</h4>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="type">Foo</span> = {};</div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span> = function() {</div><div class="line">    console.log(<span class="string">"Foo.method中this是否指向Foo ："</span> ,this === <span class="type">Foo</span>);</div><div class="line">    console.log(<span class="string">"Foo.method中this："</span> ,this);</div><div class="line">    function test() {</div><div class="line">        console.log(<span class="string">"Foo.method中test函数的this是否指向Foo ："</span> ,this === <span class="type">Foo</span>);</div><div class="line">        console.log(<span class="string">"Foo.method中test函数的this是否指向window ："</span>,this === window);</div><div class="line">        console.log(<span class="string">"Foo.method中test函数的this："</span>,this);// this 将会被设置为全局对象（浏览器环境中也就是 window 对象）</div><div class="line">    }</div><div class="line">    test();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span>();</div></pre></td></tr></table></figure>

<p>一个常见的误解是 test 中的 this 将会指向 Foo 对象，实际上不是这样子的。<br>大家也可以自己去试下，我直接贴我试的结果—<br><img src="/img/js/testthis1.jpg" alt="this的误解"><br>可以看到 Foo.method 这个函数中的 this 指向的是 Foo 这个对象，<br>而 Foo.method 中 test 函数的 this 指向的并不是Foo这个对象，而是 window 这个对象。</p>
<p><strong>解决方法</strong>：为了在 test 中获取对 Foo 对象的引用，我们需要在 method 函数内部创建一个局部变量指向 Foo 对象。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="type">Foo</span> = {};</div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span> = function() {</div><div class="line">    console.log(<span class="string">"Foo.method中this是否指向Foo ："</span> ,this === <span class="type">Foo</span>);</div><div class="line">    <span class="keyword">var</span> that = this;</div><div class="line">    function test() {</div><div class="line">        console.log(<span class="string">"Foo.method中test函数的that是否指向Foo ："</span> ,that === <span class="type">Foo</span>);</div><div class="line">    }</div><div class="line">    test();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span>();</div></pre></td></tr></table></figure>

<p>that 只是我们随意起的名字，不过这个名字被广泛的用来指向外部的 this 对象。<br><img src="/img/js/testthis2.jpg" alt="this的误解"></p>
<h4 id="避免多层this-例二">避免多层this-例二</h4>
<p>与例一类似的：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {</div><div class="line">    f1: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        }();</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">o.f1()</div><div class="line"><span class="comment">// Object</span></div><div class="line"><span class="comment">// Window</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-1.jpg" alt="this的误解"><br>两层this，结果运行后，第一层指向该对象，第二层指向全局对象。<br><strong>解决方法</strong>(同例一)：在第二层改用一个指向外层this的变量, 定义变量that，固定指向外层的this，然后在内层使用that，就不会发生this指向的改变。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {</div><div class="line">    f1: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(that);</div><div class="line">        }();</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">o.f1()</div><div class="line"><span class="comment">// Object</span></div><div class="line"><span class="comment">// Object</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-2.jpg" alt="this的误解"></p>
<h4 id="避免数组处理方法中的this">避免数组处理方法中的this</h4>
<p>数组的map和foreach方法，允许提供一个函数作为参数。这个函数内部不应该使用this。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {</div><div class="line">    v: <span class="string">'hello'</span>,</div><div class="line">    p: [ <span class="string">'a1'</span>, <span class="string">'a2'</span> ],</div><div class="line">    f: <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.p.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.v+<span class="string">' '</span>+item);</div><div class="line">        });</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">o.f()</div><div class="line"><span class="comment">// undefined a1</span></div><div class="line"><span class="comment">// undefined a2</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-3.jpg" alt="this的误解"><br>上面代码中，foreach方法的参数函数中的this，其实是指向window对象，因此取不到o.v的值。</p>
<p><strong>解决方案一</strong>:使用中间变量 - 这与避免多层this解决方法一样。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {</div><div class="line">    v: <span class="string">'hello'</span>,</div><div class="line">    p: [ <span class="string">'a1'</span>, <span class="string">'a2'</span> ],</div><div class="line">    f: <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">this</span>.p.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(that.v+<span class="string">' '</span>+item);</div><div class="line">        });</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">o.f()</div><div class="line"><span class="comment">// hello a1</span></div><div class="line"><span class="comment">// hello a2</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-4.jpg" alt="this的误解"></p>
<p><strong>解决方案二</strong>:将this当作foreach方法的第二个参数，固定它的运行环境。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = {</div><div class="line">    v: <span class="string">'hello'</span>,</div><div class="line">    p: [ <span class="string">'a1'</span>, <span class="string">'a2'</span> ],</div><div class="line">    f: <span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">this</span>.p.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.v+<span class="string">' '</span>+item);</div><div class="line">        }, <span class="keyword">this</span>);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line">o.f()</div><div class="line"><span class="comment">// hello a1</span></div><div class="line"><span class="comment">// hello a2</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-5.jpg" alt="this的误解"></p>
<h3 id="方法的赋值表达式">方法的赋值表达式</h3>
<p>另一个看起来奇怪的地方是函数别名，也就是将一个方法赋值给一个变量。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> <span class="type">Foo</span> = {};</div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span> = function() {</div><div class="line">    console.log(<span class="string">"this是否指向Foo ："</span> ,this === <span class="type">Foo</span>);</div><div class="line">    console.log(<span class="string">"this指向："</span> ,this);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="type">Foo</span>.<span class="keyword">method</span>();</div><div class="line"><span class="keyword">var</span> test = <span class="type">Foo</span>.<span class="keyword">method</span>;</div><div class="line">test();</div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis3.jpg" alt="this的误解"></p>
<p>上例中，test 就像一个普通的函数被调用；因此，函数内的 this 将不再被指向到 Foo 对象。</p>
<p>虽然 this 的晚绑定特性似乎并不友好，但是这确实基于原型继承赖以生存的土壤。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function <span class="type">Foo</span>() {}</div><div class="line"><span class="type">Foo</span>.prototype.<span class="keyword">method</span> = function() {</div><div class="line">    console.log(<span class="string">"this指向："</span> ,this);</div><div class="line">};</div><div class="line"></div><div class="line">function <span class="type">Bar</span>() {}</div><div class="line"><span class="type">Bar</span>.prototype = <span class="type">Foo</span>.prototype;</div><div class="line"></div><div class="line">new <span class="type">Bar</span>().<span class="keyword">method</span>();</div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis4.jpg" alt="this的误解"></p>
<p>当 method 被调用时，this 将会指向 Bar 的实例对象。</p>
<h3 id="避免回调函数中的this">避免回调函数中的this</h3>
<p>回调函数中的this往往会改变指向，最好避免使用。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">o.f = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === o);</div><div class="line">}</div><div class="line"></div><div class="line">o.f() <span class="comment">// true</span></div></pre></td></tr></table></figure>

<p><img src="/img/js/testthis2-6.jpg" alt="this的误解"><br>上面代码表示，如果调用o对象的f方法，其中的this就是指向o对象。</p>
<p>但是，如果将f方法指定给某个按钮的click事件，this的指向就变了。<br>$(“#button”).on(“click”, o.f);</p>
<p>点击按钮以后，控制台会显示false。原因是此时this不再指向o对象，而是指向按钮的DOM对象，因为f方法是在按钮对象的环境中被调用的。这种细微的差别，很容易在编程中忽视，导致难以察觉的错误。</p>
<p>为了解决这个问题，可以采用下面的一些方法对this进行绑定，也就是使得this固定指向某个对象，减少不确定性。</p>
<h2 id="固定this的方法">固定this的方法</h2>
<p>this的动态切换，固然为JavaScript创造了巨大的灵活性，但也使得编程变得困难和模糊。有时，需要把this固定下来，反正出现意想不到的情况。</p>
<p>JavaScript提供了call、apply、bind这三个方法，来固定this的指向。</p>
<h3 id="call方法">call方法</h3>
<p>函数的call方法，可以改变指定该函数内部this的指向，然后再调用该函数。它的使用格式如下。</p>
<blockquote>
<p>func.call(thisValue, arg1, arg2, …)</p>
</blockquote>
<p><strong>thisValue</strong>:第一个参数是this所要指向的那个对象。(如果this所要指向的那个对象，设定为null或undefined，则等同于指定全局对象。)<br><strong>arg1,arg2, …</strong>:函数调用时所需的参数</p>
<h4 id="例">例</h4>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = { n : <span class="number">456</span> };</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span><span class="params">()</span> </span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.n);</div><div class="line">}</div><div class="line"></div><div class="line">a.call() <span class="comment">// 123</span></div><div class="line">a.call(<span class="literal">null</span>) <span class="comment">// 123</span></div><div class="line">a.call(<span class="literal">undefined</span>) <span class="comment">// 123</span></div><div class="line">a.call(<span class="built_in">window</span>) <span class="comment">// 123</span></div><div class="line">a.call(o) <span class="comment">// 456</span></div></pre></td></tr></table></figure>

<p>上面代码中，a函数中的this关键字，如果指向全局对象，返回结果为123。<br>如果使用call方法，将this关键字指向o对象，返回结果为456。</p>
<h3 id="apply方法">apply方法</h3>
<p>apply方法的作用与call方法类似，也是改变this指向，然后再调用该函数。它的使用格式如下。</p>
<blockquote>
<p>func.apply(thisValue, [arg1, arg2, …])</p>
</blockquote>
<p><strong>thisValue</strong>:第一个参数也是this所要指向的那个对象，如果设为null或undefined，则等同于指定全局对象。<br><strong>[arg1, arg2, …]</strong>:第二个参数是一个数组，该数组的所有成员依次作为参数，传入原函数。<br>原函数的参数，在call方法中必须一个个添加，但是在apply方法中，必须以数组形式添加。</p>
<h4 id="例-1">例</h4>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x,y)</span></span>{ <span class="built_in">console</span>.log(x+y); }</div><div class="line"></div><div class="line">f.call(<span class="literal">null</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// 2</span></div><div class="line">f.apply(<span class="literal">null</span>,[<span class="number">1</span>,<span class="number">1</span>]) <span class="comment">// 2</span></div></pre></td></tr></table></figure>

<p>上面的f函数本来接受两个参数，使用apply方法以后，就变成可以接受一个数组作为参数。</p>
<p>利用这一点，可以做一些有趣的应用。</p>
<h4 id="应用一：找出数组最大元素">应用一：找出数组最大元素</h4>
<p>JavaScript不提供找出数组最大元素的函数。结合使用apply方法和Math.max方法，就可以返回数组的最大元素。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">9</span>];</div><div class="line"></div><div class="line"><span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, a)</div><div class="line"><span class="comment">// 15</span></div></pre></td></tr></table></figure>

<p>上例等同于这样写</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.max(<span class="number">10</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">9</span>);</div><div class="line"><span class="comment">// 15</span></div></pre></td></tr></table></figure>

<p>关于Math.max:</p>
<blockquote>
<p>定义和用法:<br>max() 方法可返回两个指定的数中带有较大的值的那个数。</p>
<p>语法:<br>Math.max(x…)</p>
<p>参数:<br>0 或多个值。在 ECMASCript v3 之前，该方法只有两个参数。</p>
<p>返回值:<br>参数中最大的值。如果没有参数，则返回 -Infinity。如果有某个参数为 NaN，或是不能转换成数字的非数字值，则返回 NaN。</p>
</blockquote>
<h4 id="应用二：将数组的空元素变为undefined">应用二：将数组的空元素变为undefined</h4>
<p>通过apply方法，利用Array构造函数将数组的空元素变成undefined。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Array.apply(null, [<span class="string">"a"</span>,,<span class="string">"b"</span>])</div><div class="line">// [ '<span class="literal">a</span>', undefined, 'b' ]</div></pre></td></tr></table></figure>

<p>关于Array构造函数：</p>
<blockquote>
<p>创建 Array 对象的语法：<br>new Array();<br>new Array(size);<br>new Array(element0, element1, …, elementn);</p>
<p>参数:<br>参数 size 是期望的数组元素个数。返回的数组，length 字段将被设为 size 的值。<br>参数 element …, elementn 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值。它的 length 字段也会被设置为参数的个数。</p>
<p>返回值:<br>返回新创建并被初始化了的数组。<br>如果调用构造函数 Array() 时没有使用参数，那么返回的数组为空，length 字段为 0。<br>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为 undefined 的数组。<br>当其他参数调用 Array() 时，该构造函数将用参数指定的值初始化数组。<br>当把构造函数作为函数调用，不使用 new 运算符时，它的行为与使用 new 运算符调用它时的行为完全一样。</p>
</blockquote>
<p>空元素与undefined的差别在于，数组的foreach方法会跳过空元素，但是不会跳过undefined。<br>因此，遍历内部元素的时候，会得到不同的结果。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="string">"a"</span>,,<span class="string">"b"</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span><span class="params">(i)</span> </span>{</div><div class="line">    console.log(i);</div><div class="line">}</div><div class="line"></div><div class="line">a.<span class="keyword">forEach</span>(<span class="keyword">print</span>)</div><div class="line"><span class="comment">// a</span></div><div class="line"><span class="comment">// b</span></div><div class="line"></div><div class="line"><span class="keyword">Array</span>.apply(<span class="keyword">null</span>,a).<span class="keyword">forEach</span>(<span class="keyword">print</span>)</div><div class="line"><span class="comment">// a</span></div><div class="line"><span class="comment">// undefined</span></div><div class="line"><span class="comment">// b</span></div></pre></td></tr></table></figure>

<h4 id="应用三：转换类似数组的对象">应用三：转换类似数组的对象</h4>
<p>利用数组对象的slice方法，可以将一个类似数组的对象（比如arguments对象）转为真正的数组。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.prototype.slice.apply({<span class="number">0</span>:<span class="number">1</span>,length:<span class="number">1</span>})</div><div class="line"><span class="comment">// [1]</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.slice.apply({<span class="number">0</span>:<span class="number">1</span>})</div><div class="line"><span class="comment">// []</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.slice.apply({<span class="number">0</span>:<span class="number">1</span>,length:<span class="number">2</span>})</div><div class="line"><span class="comment">// [1, undefined]</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>.prototype.slice.apply({length:<span class="number">1</span>})</div><div class="line"><span class="comment">// [undefined]</span></div></pre></td></tr></table></figure>

<p>关于slice方法：</p>
<blockquote>
<p>定义和用法:<br>slice() 方法可从已有的数组中返回选定的元素。</p>
<p>语法<br>arrayObject.slice(start,end)</p>
<p>参数<br>start:必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部开始算起的位置。也就是说，-1 指最后一个元素，-2 指倒数第二个元素，以此类推。<br>end:可选。规定从何处结束选取。该参数是数组片断结束处的数组下标。如果没有指定该参数，那么切分的数组包含从 start 到数组结束的所有元素。如果这个参数是负数，那么它规定的是从数组尾部开始算起的元素。</p>
<p>返回值<br>返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。</p>
<p>说明<br>请注意，该方法并不会修改数组，而是返回一个子数组。如果想删除数组中的一段元素，应该使用方法 Array.splice()。</p>
</blockquote>
<p><strong>slice例一</strong>：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="reserved">var</span> arr = <span class="keyword">new</span> Array(<span class="number">3</span>)</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span></div><div class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">1</span>))</div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line"><span class="regexp">//</span>  [<span class="string">"George"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</div><div class="line"><span class="regexp">//</span>  [<span class="string">"John"</span>, <span class="string">"Thomas"</span>]</div><div class="line"><span class="regexp">//</span>  [<span class="string">"George"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>]</div></pre></td></tr></table></figure>

<p><strong>slice例二</strong>：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="reserved">var</span> arr = <span class="keyword">new</span> Array(<span class="number">6</span>)</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span></div><div class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></div><div class="line">arr[<span class="number">3</span>] = <span class="string">"James"</span></div><div class="line">arr[<span class="number">4</span>] = <span class="string">"Adrew"</span></div><div class="line">arr[<span class="number">5</span>] = <span class="string">"Martin"</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">2</span>,<span class="number">4</span>))</div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line"><span class="regexp">//</span>  [<span class="string">"George"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</div><div class="line"><span class="regexp">//</span>  [<span class="string">"Thomas"</span>, <span class="string">"James"</span>]</div><div class="line"><span class="regexp">//</span>  [<span class="string">"George"</span>, <span class="string">"John"</span>, <span class="string">"Thomas"</span>, <span class="string">"James"</span>, <span class="string">"Adrew"</span>, <span class="string">"Martin"</span>]</div></pre></td></tr></table></figure>

<h4 id="应用四：绑定回调函数的对象">应用四：绑定回调函数的对象</h4>
<p>之前的按钮点击事件的例子，可以改写成</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"></div><div class="line">o.f = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span> === o);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    o.f.apply(o);</div><div class="line">    <span class="comment">// 或者 o.f.call(o);</span></div><div class="line">};</div><div class="line"></div><div class="line">$(<span class="string">"#button"</span>).on(<span class="string">"click"</span>, f);</div></pre></td></tr></table></figure>

<p>点击按钮以后，控制台将会显示true。由于apply方法（或者call方法）不仅绑定函数执行时所在的对象，还会立即执行函数，因此不得不把绑定语句写在一个函数体内。<br>更简洁的写法是采用下面介绍的bind方法。</p>
<h3 id="bind方法">bind方法</h3>
<p>bind方法就是单纯地将函数体内的this绑定到某个对象，然后返回一个新函数。它的使用格式如下。</p>
<blockquote>
<p>func.bind(thisValue, arg1, arg2,…)</p>
</blockquote>
<p>它比call方法和apply方法更进一步的是，除了绑定this以外，还可以绑定原函数的参数。</p>
<p>请看下面的例子。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o1.p = <span class="number">123</span>;</div><div class="line">o1.m = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.p);</div><div class="line">};</div><div class="line"></div><div class="line">o1.m() <span class="comment">// 123</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">o2.p = <span class="number">456</span>;</div><div class="line">o2.m = o1.m;</div><div class="line"></div><div class="line">o2.m() <span class="comment">// 456</span></div><div class="line"></div><div class="line">o2.m = o1.m.bind(o1);</div><div class="line">o2.m() <span class="comment">// 123</span></div></pre></td></tr></table></figure>

<p>上面代码使用bind方法将o1.m方法绑定到o1以后，在o2对象上调用o1.m的时候，o1.m函数体内部的this.p就不再到o2对象去寻找p属性的值了。</p>
<p>如果bind方法的第一个参数是null或undefined，等于将this绑定到全局对象，函数运行时this指向全局对象（在浏览器中为window）。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(x,y)</span> </span>{ <span class="keyword">return</span> x+y; }</div><div class="line"></div><div class="line"><span class="keyword">var</span> plus5 = add.bind(<span class="literal">null</span>, <span class="number">5</span>);</div><div class="line"></div><div class="line">plus5(<span class="number">10</span>) <span class="comment">// 15</span></div></pre></td></tr></table></figure>

<h4 id="使用bind时需注意">使用bind时需注意</h4>
<h5 id="每一次返回一个新函数">每一次返回一个新函数</h5>
<p>bind方法每运行一次，就返回一个新函数，这会产生一些问题。<br>比如，监听事件的时候，不能写成下面这样。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.addEventListener(<span class="string">'click'</span>, o.<span class="keyword">m</span>.<span class="keyword">bind</span>(o));</div></pre></td></tr></table></figure>

<p>上面代码表示，click事件绑定bind方法生成的一个匿名函数。这样会导致无法取消绑定，所以，下面的代码是无效的。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">element.removeEventListener(<span class="string">'click'</span>, o.<span class="keyword">m</span>.<span class="keyword">bind</span>(o));</div></pre></td></tr></table></figure>

<p>正确的方法是写成下面这样：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var listener = o.m.bind(o);</div><div class="line">element.addEventListener(<span class="string">'click'</span>, listener);</div><div class="line">//  <span class="keyword">...</span></div><div class="line">element.removeEventListener(<span class="string">'click'</span>, listener);</div></pre></td></tr></table></figure>

<h5 id="bind方法的自定义代码">bind方法的自定义代码</h5>
<p>对于那些不支持bind方法的老式浏览器，可以自行定义bind方法。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!(<span class="string">'bind'</span> <span class="keyword">in</span> <span class="built_in">Function</span>.prototype)){</div><div class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">var</span> context = <span class="built_in">arguments</span>[<span class="number">0</span>];</div><div class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">            <span class="keyword">return</span> fn.apply(context, args);</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h5 id="jQuery的proxy方法">jQuery的proxy方法</h5>
<p>除了用bind方法绑定函数运行时所在的对象，还可以使用jQuery的$.proxy方法，它与bind方法的作用基本相同。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$(</span><span class="string">"#button"</span>).on(<span class="string">"click"</span>, <span class="variable">$.</span>proxy(o.f, o));</div></pre></td></tr></table></figure>

<p>上面代码表示，$.proxy方法将o.f方法绑定到o对象。</p>
<h5 id="结合call方法使用">结合call方法使用</h5>
<p>利用bind方法，可以改写一些JavaScript原生方法的使用形式，以数组的slice方法为例。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr_selector">[1,2,3]</span><span class="class">.slice</span>(0,1)</div><div class="line"><span class="comment">// [1]</span></div><div class="line"></div><div class="line"><span class="comment">// 等同于</span></div><div class="line"></div><div class="line">Array<span class="class">.prototype</span><span class="class">.slice</span><span class="class">.call</span>(<span class="attr_selector">[1,2,3]</span>, 0, 1)</div><div class="line"><span class="comment">// [1]</span></div></pre></td></tr></table></figure>

<p>上面的代码中，数组的slice方法从[1, 2, 3]里面，按照指定位置和长度切分出另一个数组。这样做的本质是在[1, 2, 3]上面调用Array.prototype.slice方法，因此可以用call方法表达这个过程，得到同样的结果。</p>
<p>call方法实质上是调用Function.prototype.call方法，因此上面的表达式可以用bind方法改写。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> slice = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">call</span>.<span class="title">bind</span><span class="params">(<span class="keyword">Array</span>.prototype.slice)</span>;</span></div><div class="line"></div><div class="line">slice([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// [1]</span></div></pre></td></tr></table></figure>

<p>可以看到，利用bind方法，将[1, 2, 3].slice(0, 1)变成了slice([1, 2, 3], 0, 1)的形式。<br>这种形式的改变还可以用于其他数组方法。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> push = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">call</span>.<span class="title">bind</span><span class="params">(<span class="keyword">Array</span>.prototype.push)</span>;</span></div><div class="line"><span class="keyword">var</span> pop = <span class="function"><span class="keyword">Function</span>.<span class="title">prototype</span>.<span class="title">call</span>.<span class="title">bind</span><span class="params">(<span class="keyword">Array</span>.prototype.pop)</span>;</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span> ,<span class="number">2</span> ,<span class="number">3</span>];</div><div class="line">push(a, <span class="number">4</span>)</div><div class="line">a <span class="comment">// [1, 2, 3, 4]</span></div><div class="line"></div><div class="line">pop(a)</div><div class="line">a <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure>

<p>如果再进一步，将Function.prototype.call方法绑定到Function.prototype.bind对象，就意味着bind的调用形式也可以被改写。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.v);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">var</span> o = { v: <span class="number">123</span> };</div><div class="line"></div><div class="line"><span class="keyword">var</span> bind = <span class="built_in">Function</span>.prototype.call.bind(<span class="built_in">Function</span>.prototype.bind);</div><div class="line"></div><div class="line">bind(f,o)() <span class="comment">// 123</span></div></pre></td></tr></table></figure>

<p>上面代码表示，将Function.prototype.call方法绑定Function.prototype.bind以后，bind方法的使用形式从f.bind(o)，变成了bind(f, o)。</p>
<hr>
<p>参考文献：<br><a href="http://javascript.ruanyifeng.com/oop/basic.html#toc5" target="_blank" rel="external">[1] 面向对象编程概述 - JavaScript 标准参考教程（alpha）</a><br><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this" target="_blank" rel="external">[2] this 的工作原理 - JavaScript 秘密花园</a><br><a href="http://nodejs.org/api/globals.html" target="_blank" rel="external">[3] Global Objects - Node.js v0.10.31 Manual &amp; Documentation</a><br><a href="http://stackoverflow.com/questions/10987444/how-to-use-global-variable-in-node-js" target="_blank" rel="external">[4] How to use global variable in node.js? - stackoverflow</a></p>
]]></content>
    
    
      <category term="JavaScript" scheme="http://snailsky.me/tags/JavaScript/"/>
    
      <category term="stackoverflow" scheme="http://snailsky.me/tags/stackoverflow/"/>
    
      <category term="原理" scheme="http://snailsky.me/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="JavaScript" scheme="http://snailsky.me/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【CSS】block-level boxes、containing block、block formatting context]]></title>
    <link href="http://snailsky.me/2014/08/24/block-level-boxes%E3%80%81containing-block%E3%80%81block-formatting-context/"/>
    <id>http://snailsky.me/2014/08/24/block-level-boxes、containing-block、block-formatting-context/</id>
    <published>2014-08-24T11:05:15.000Z</published>
    <updated>2014-09-30T09:45:41.000Z</updated>
    <content type="html"><![CDATA[<p>在知乎看到这样一个问题“CSS 中 block-level boxes、containing block、block formatting context 三者之间的区别和联系是怎样的？”<br>我傻傻分不清楚 = =，这必须记录一下这些概念加深印象，备个忘，同时也让自己掰扯掰扯这些概念。<br>（以下标准翻译部分是博主自己尝试翻译的 &gt;_&lt; ，如有错误或不到位的请指正）</p>
<hr>
<h2 id="标准中的描述">标准中的描述</h2>
<h3 id="Block-level_elements_and_block_boxes">Block-level elements and block boxes</h3>
<p><a href="http://www.w3.org/TR/CSS21/visuren.html#block-boxes" target="_blank" rel="external">9.2.1 Block-level elements and block boxes</a></p>
<blockquote>
<p>Block-level elements are those elements of the source document that are formatted visually as blocks (e.g., paragraphs). The following values of the ‘display’ property make an element block-level: ‘block’, ‘list-item’, and ‘table’.</p>
<p>Block-level boxes are boxes that participate in a block formatting context. Each block-level element generates a principal block-level box that contains descendant boxes and generated content and is also the box involved in any positioning scheme. Some block-level elements may generate additional boxes in addition to the principal box: ‘list-item’ elements. These additional boxes are placed with respect to the principal box.</p>
<p>Except for table boxes, which are described in a later chapter, and replaced elements, a block-level box is also a block container box. A block container box either contains only block-level boxes or establishes an inline formatting context and thus contains only inline-level boxes. Not all block container boxes are block-level boxes: non-replaced inline blocks and non-replaced table cells are block containers but not block-level boxes. Block-level boxes that are also block containers are called block boxes.</p>
<p>The three terms “block-level box,” “block container box,” and “block box” are sometimes abbreviated as “block” where unambiguous.</p>
</blockquote>
<p>译：</p>
<p><strong>块级元素（block-level elements）</strong>是源文档中那些以块的形式显示的一些元素（比如：段落（paragraphs））。以下”display”属性值，可以使一个元素 变成块级 ： “block” , “list-item” 和 “table”</p>
<p><strong>块级盒子（block-level boxes）</strong> 会参与到 <strong>块级格式化上下文(block formatting context)</strong>（一种布局方式） 。每个<strong>块级元素</strong>会生成一个<strong>首要块级盒子（principal block-level box）</strong> ，这个<strong>首要块级盒子</strong>包含后代盒子们，以及生成内容，并且这个<strong>块级元素</strong>也被包含到任何一种定位机制中。一些<strong>块级元素</strong>除了会生成<strong>首要块级盒子</strong>之外，还会生成额外盒子们，比如：”list-item” elment。这些额外的盒子参照<strong>首要块级盒子</strong>放置。</p>
<p>除了<strong>表格盒子（table boxes）</strong>（将在之后的章节中描述它）和<strong><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Replaced_element" target="_blank" rel="external">可替换元素（replaced elements）</a></strong>，一个<strong>块级盒子</strong>也是一个<strong>块容器盒子（block container box）</strong>。一个<strong>块容器盒子</strong>要么只包含<strong>块级盒子</strong>，要么创建一个只包含<strong>行级盒子（inline-level boxes）</strong>的<strong>行内格式化上下文（inline formatting context）</strong>。不是所有<strong>块容器盒子</strong>都是<strong>块级盒子</strong>，比如：<strong>不可替换行内块（non-replaced inline blocks）</strong>和<strong>不可替换表格单元格</strong>都是<strong>块容器盒子</strong>但不是<strong>块级盒子</strong>。是<strong>块级盒子</strong>又是<strong>块容器盒子</strong>的被叫做<strong>块盒子（block boxes）</strong>。</p>
<p>这三个术语 “<strong>块级盒子（block-level boxes）</strong>“,”<strong>块容器盒子（block container box）</strong>“和”<strong>块盒子（block boxes）</strong>“在表述清晰的条件下有时被简称为”块（block）”。</p>
<hr>
<h3 id="Block_formatting_contexts">Block formatting contexts</h3>
<p><a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="external">9.4.1 Block formatting contexts</a></p>
<blockquote>
<p>Floats, absolutely positioned elements, block containers (such as inline-blocks, table-cells, and table-captions) that are not block boxes, and block boxes with ‘overflow’ other than ‘visible’ (except when that value has been propagated to the viewport) establish new block formatting contexts for their contents.</p>
<p>In a block formatting context, boxes are laid out one after the other, vertically, beginning at the top of a containing block. The vertical distance between two sibling boxes is determined by the ‘margin’ properties. Vertical margins between adjacent block-level boxes in a block formatting context collapse.</p>
<p>In a block formatting context, each box’s left outer edge touches the left edge of the containing block (for right-to-left formatting, right edges touch). This is true even in the presence of floats (although a box’s line boxes may shrink due to the floats), unless the box establishes a new block formatting context (in which case the box itself may become narrower due to the floats).</p>
<p>For information about page breaks in paged media, please consult the section on allowed page breaks.</p>
</blockquote>
<p>译:</p>
<p>不是<strong>块盒子（block boxes）</strong>的：<strong>浮动（floats）</strong>，<strong>绝对定位元素（absolutely positioned elements）</strong>，<strong>块容器（block containers）</strong>（如：<strong>行内块（inline-blocks）</strong>，<strong>表格单元格（table-cells）</strong>和<strong>表格标题（table-captions）</strong>）；以及有”overflow”属性，且”overflow”属性值不为”visible”的（除了当值传递到窗口 这句没懂…）都会为他们的内容创建一个新的<strong>块级格式化上下文（block formatting contexts）</strong>。</p>
<p>在一个<strong>块级格式化上下文（block formatting contexts）</strong>中，盒子们自所在的 containing block 顶部起一个接一个垂直排列，水平方向上撑满整个宽度 (除非内部的盒子自己内部建立了新的 BFC)。在两个兄弟盒子之间的垂直间距被定义为”margin”属性。<strong>块级格式化上下文</strong>中毗邻的<strong>块级盒子（block-level boxes）</strong>之间的垂直方向边距不会发生折叠（collapse）。</p>
<p>在一个<strong>块级格式化上下文</strong>中，每个盒子左外边框紧挨着其包含块的左边框（从右向左排列时，右外边框紧挨着其包含块的右边框）。即使是浮动（floats）的情况下也成立（即使一个（父元素）盒子的线框会由于（子元素）浮动收缩），除非这个盒子创建了一个新的<strong>块级格式化上下文</strong>（在这种情况下这个盒子自己会由于浮动会变窄）。</p>
<p>想了解关于<strong>分页媒体（paged media）</strong>中的<strong>分页符（page breaks）</strong>，请查阅这个章节：<a href="http://www.w3.org/TR/CSS21/page.html#allowed-page-breaks" target="_blank" rel="external">allowed page breaks</a></p>
<hr>
<h2 id="总结/需要注意的">总结/需要注意的</h2>
<h3 id="Block_formatting_contexts-1">Block formatting contexts</h3>
<h4 id="What_triggers_block_formatting_contexts">What triggers block formatting contexts</h4>
<ul>
<li>float 除了none以外的值</li>
<li>overflow 除了visible 以外的值（hidden，auto，scroll ）</li>
<li>display (table-cell，table-caption，inline-block)</li>
<li>position（absolute，fixed）</li>
<li>fieldset元素</li>
</ul>
<h4 id="How_block_formatting_contexts_flow">How block formatting contexts flow</h4>
<p>block formatting contexts 属于普通流（normal flow）</p>
<h4 id="What_block_formatting_contexts_do">What block formatting contexts do</h4>
<ol>
<li><p>创建了 BFC 的元素，不和它的子元素发生外边距折叠。</p>
<p>外边距折叠的规则：仅当两个块级元素相邻并且在同一个块级格式化上下文时，它们垂直方向之间的外边距才会叠加。也就是说，即便两个块级元素相邻，但当它们不在同一个块级格式化上下文时它们的边距也不会折叠。因此，阻止外边距折叠只需产生新的 BFC 。</p>
<p>DEMO:<br><iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/0zad5mtv/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe><br>三个 div 各包含一个 p 元素，三个 div 及其包含的 p 元素都有顶部和底部的外边距，但只有第三个 div 的边距没有与它的子元素 p 的外边距折叠。这是因为第三个 div 创建了新的 BFC ，由此可见：创建了 BFC 的元素，不和它的子元素发生外边距折叠。</p>
</li>
<li><p>BFC 可以包含浮动的元素,闭合浮动。</p>
<p>这也正是使用 overflow: hidden 与 overflow: auto 方法闭合浮动的原理，使用 overflow: hidden 或 overflow: auto 触发浮动元素的父元素的 BFC 特性，从而可以包含浮动元素，闭合浮动。<br>W3C 的原文是“’Auto’ heights for block formatting context roots”，也就是 BFC 会根据子元素的情况自动适应高度，即使其子元素中包括浮动元素。</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/2vyexx1q/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>更详细的清除浮动方法可见：<a href="http://snailsky.me/2014/08/20/%E6%B5%AE%E5%8A%A8%E5%92%8C%E5%AE%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%9F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%8A%80%E5%B7%A7%EF%BC%9F/" target="_blank" rel="external">浮动和它的工作原理？清除浮动的技巧？</a></p>
</li>
<li><p>BFC 可以阻止元素被浮动元素覆盖</p>
<p>浮动元素的块级兄弟元素会无视浮动元素的位置，尽量占满一整行，这样就会被浮动元素覆盖，为该兄弟元素触发 BFC 后可以阻止这种情况的发生。<br>DEMO:<br>块级元素会被它的兄弟浮动元素覆盖</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/8o4ysvor/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>触发了 BFC 的元素不会被它的兄弟浮动元素覆盖</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/xsovngvk/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>子元素宽度均小于父元素，但父元素宽度不足以容纳一行中所有子元素时，非浮动子元素会下沉</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/tewfLt3w/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</li>
</ol>
<hr>
<h3 id="block-level_boxes">block-level boxes</h3>
<h4 id="relationship_with_block_formatting_contexts">relationship with block formatting contexts</h4>
<p>一个 block-level element (‘display’ 属性值为 ‘block’, ‘list-item’ 或是 ‘table’) 会生成一个 block-level box，<br>这样的盒子会参与到 block-formatting context (一种布局的方式) 中。</p>
<hr>
<h3 id="containing_block">containing block</h3>
<p>一般来说，盒子本身就为其子孙建立了 containing block，用来计算内部盒子的位置、大小，而对内部的盒子，具体采用哪个 containing block 来计算，需要分情况来讨论：</p>
<ol>
<li>根元素所在的 containing block 被称为 initial containing block，在我们常用的浏览器环境下，指的是原点与 canvas 重合，大小和 viewport 相同的矩形；</li>
<li>对于 position 为 static 或 relative 的元素，其 containing block 为祖先元素中最近的 block container box 的 content box (除 margin, border, padding 外的区域)；</li>
<li>对于 position:fixed 的元素，其 containing block 由 viewport 建立；</li>
<li>对于 position:absolute 的元素，则是先找到其祖先元素中最近的 position 属性非 static 的元素，然后判断：<ol>
<li>若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</li>
<li>否则则由这个祖先元素的 padding box 构成。<br>如果都找不到，则为 initial containing block。</li>
</ol>
</li>
</ol>
<hr>
<p>参考文献：<br><a href="http://www.w3.org/TR/CSS21/visuren.html#block-boxes" target="_blank" rel="external">[1] 9.2.1 Block-level elements and block boxes</a><br><a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="external">[2] 9.4.1 Block formatting contexts</a><br><a href="http://w3help.org/zh-cn/kb/008/" target="_blank" rel="external">[3] KB008: 包含块( Containing block )</a><br><a href="http://www.yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts" target="_blank" rel="external">[4] CSS 101: Block Formatting Contexts</a><br><a href="http://kayosite.com/block-formatting-contexts-in-detail.html" target="_blank" rel="external">[5] 详说 Block Formatting Contexts (块级格式化上下文)</a><br><a href="http://stackoverflow.com/questions/6196725/how-does-the-css-block-formatting-context-work" target="_blank" rel="external">[6] How does the CSS Block Formatting Context work?</a><br><a href="http://www.zhihu.com/question/20086234" target="_blank" rel="external">[7] CSS 中 block-level boxes、containing block、block formatting context 三者之间的区别和联系是怎样的？</a></p>
]]></content>
    
    
      <category term="CSS" scheme="http://snailsky.me/tags/CSS/"/>
    
      <category term="总结" scheme="http://snailsky.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="CSS" scheme="http://snailsky.me/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS布局总结与实践]]></title>
    <link href="http://snailsky.me/2014/08/21/css%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93%E4%B8%8E%E5%AE%9E%E8%B7%B5/"/>
    <id>http://snailsky.me/2014/08/21/css布局总结与实践/</id>
    <published>2014-08-21T10:08:23.000Z</published>
    <updated>2014-09-14T03:15:04.000Z</updated>
    <content type="html"><![CDATA[<p>重在实践，把常用的布局及其实践总结在这备忘，方便以后查询和使用。<br>包含了 “如何设置块级元素水平居中” 、 “如何实现左固定宽度或百分比，右边自适应” 等常见问题。<br>和 “外边距折叠” 这类重要的概念。及各种常见的属性和布局。</p>
<hr>
<h2 id="如何设置块级元素水平居中？">如何设置块级元素水平居中？</h2>
<h3 id="方法一(差)：设置width_+_margin">方法一(差)：设置width + margin</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#main</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">600px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/rf810w0s/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3 id="方法二(可)：设置max-width_+_margin">方法二(可)：设置max-width + margin</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#main</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">600px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/zqm5hwt1/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h2 id="盒子模型">盒子模型</h2>
<h3 id="盒子模型的结构">盒子模型的结构</h3>
<p>为了给文档树中的各个元素排版定位（布局），浏览器会根据渲染模型1为每个元素生成四个嵌套的矩形框， 分别称作 content box、padding box、border box 和 margin box，它们是不可分割的，并可能会重合， 这就是 CSS 规范中描述的“框模型”（box model）。它是以 CSS 的角度去看一个元素被渲染后的抽象形态。 是一个元素自身的构成部分，不同于布局：多个元素在页面上的定位。</p>
<p><img src="/img/CSS/hemoxing2d.png" alt="盒模型"></p>
<p>盒子3D模型：<br><img src="/img/CSS/hemoxing3d.png" alt="盒模型"><br>对于盒子模型如想理解详细，请看这里： <a href="http://w3help.org/zh-cn/kb/006/" target="_blank" rel="external">CSS 框模型( Box module )</a></p>
<h3 id="外边距折叠(_Collapsing_margins_)">外边距折叠( Collapsing margins )</h3>
<p>Collapsing margins，即外边距折叠，指的是毗邻的两个或多个外边距 (margin) 会合并成一个外边距。</p>
<p>其中所说的 margin 毗邻，可以归结为以下两点：</p>
<ul>
<li>这两个或多个外边距没有被非空内容、padding、border 或 clear 分隔开。</li>
<li>这些 margin 都处于普通流中。（既 in-flow，非浮动元素，非定位元素）</li>
</ul>
<p>其规则为: <strong>两个或多个</strong> <strong>毗邻</strong> 的普通流中的块元素 <strong>垂直</strong> 方向上的 margin 会折叠<br>了解详情，请看：<a href="http://w3help.org/zh-cn/kb/006/" target="_blank" rel="external">CSS 框模型( Box module )</a></p>
<p>试一试其中的例子：<br>DEMO-1(毗邻)：<br>HTML</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"lightpink"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"lightgreen"</span>&gt;</div><div class="line">       &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"lightyellow"</span>&gt;</div><div class="line">           &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"lightblue"</span>&gt;D BLOCK&lt;/<span class="keyword">div</span>&gt;</div><div class="line">       &lt;/<span class="keyword">div</span>&gt;</div><div class="line">    &lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<p>CSS</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class">.lightpink</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value">lightpink</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid red</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">100px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.lightgreen</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">50px</span> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value">lightgreen</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"><span class="number">50px</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">50px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.lightyellow</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value">lightyellow</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">20px</span> <span class="number">0</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.lightblue</span><span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-color</span>:<span class="value">lightblue</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">100px</span> <span class="number">0</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/wuzpm0uw/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>在没有被非空内容、padding、border 或 clear 分隔开（毗邻）的情况下，一个元素的 margin-top 会和它普通流中的第一个子元素(非浮动元素等)的 margin-top 相邻； 只有在一个元素的 height 是 “auto” 的情况下，它的 margin-bottom 才会和它普通流中的最后一个子元素(非浮动元素等)的 margin-bottom 相邻。</p>
<p>此例中的 lightgreen块（margin:50px 0;） 与 它的第一个且最后一个子元素 lightyellow块（margin:100px,0;） 毗邻 且 lightyellow块（margin:50px 0;） 与 它的第一个且最后一个元素 lightblue块（margin:100px 0;）毗邻，<br>他们的 margin-top 发生合并，取最大值，此时lightgreen块的 margin-top 为 100px。<br>而因为 lightgreen块（margin:50px 0;）有 height 值（height:50px;）因此它的 margin-bottom 与其最后一个子元素 lightyellow块（margin:20px 0;）的 margin-bottom 并不相邻，因此 margin-bottom 不发生合并,此时lightgreen块的 margin-bottom 为 50px。</p>
<p>所以我们看到了 lightpink块 被 lightgreen块 撑开 而margin-top和margin-bottom看起来不同，就是这个道理啦…</p>
<hr>
<h4 id="折叠后_margin_的计算">折叠后 margin 的计算</h4>
<p>DEMO-2(参与折叠的 margin 都是正值):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:50px; margin-bottom:50px; width:50px; background-color: red;"</span>&gt;A&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:50px; margin-top:100px; width:50px; background-color: green;"</span>&gt;B&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/zeLm7tj3/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>由上结果观察到：A 与 B 间距 100px;<br><strong>结论</strong>：在 margin 都是正数的情况下，取其中 margin 较大的值为最终 margin 值。</p>
<hr>
<p>DEMO-3(参与折叠的 margin 都是负值):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:100px; margin-bottom:-75px; width:100px; background-color: red;"</span>&gt;A&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:100px; margin-top:-50px; margin-left:50px; width:100px; background-color: green;"</span>&gt;B&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/kqfohd9d/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>由上结果观察到：A 与 B 重叠部分高度 75px;<br><strong>结论</strong>：当 margin 都是负值的时候，取的是其中绝对值较大的，然后，从 0 位置，负向位移。</p>
<hr>
<p>DEMO-4(参与折叠的 margin 中有正值，有负值):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:50px; margin-bottom:-50px; width:50px; background-color: red;"</span>&gt;A&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"height:50px; margin-top:100px; width:50px; background-color: green;"</span>&gt;B&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/sppwxkg7/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>由上结果观察到：A 与 B 间距 50（px)=100+（-50）;<br><strong>结论</strong>：有正有负，先取出负 margin 中绝对值中最大的，然后，和正 margin 值中最大的 margin 相加。</p>
<hr>
<p>DEMO-5(相邻的 margin 要一起参与计算，不得分步计算):<br>要注意，相邻的元素不一定非要是兄弟节点，父子节点也可以，即使不是兄弟父子节点也可以相邻。</p>
<p>而且，在计算时，相邻的 margin 要一起参与计算，不得分步计算。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="operator">div</span> style=<span class="string">"background-color:green; width:50px;"</span>&gt;</div><div class="line">    <span class="keyword">before</span> A</div><div class="line">&lt;/<span class="operator">div</span>&gt;</div><div class="line">&lt;<span class="operator">div</span> style=<span class="string">"margin:50px 0; background-color:green; width:50px;"</span>&gt;</div><div class="line">    &lt;<span class="operator">div</span> style=<span class="string">"margin:-60px 0;"</span>&gt;</div><div class="line">           &lt;<span class="operator">div</span> style=<span class="string">"margin:150px 0;"</span>&gt;A&lt;/<span class="operator">div</span>&gt;</div><div class="line">    &lt;/<span class="operator">div</span>&gt;</div><div class="line">&lt;/<span class="operator">div</span>&gt;</div><div class="line">&lt;<span class="operator">div</span> style=<span class="string">"margin:-100px 0; background-color:green; width:50px;"</span>&gt;</div><div class="line">    &lt;<span class="operator">div</span> style=<span class="string">"margin:-120px 0;"</span>&gt;</div><div class="line">           &lt;<span class="operator">div</span> style=<span class="string">"margin:200px 0;"</span>&gt;B&lt;/<span class="operator">div</span>&gt;</div><div class="line">    &lt;/<span class="operator">div</span>&gt;</div><div class="line">&lt;/<span class="operator">div</span>&gt;</div><div class="line">&lt;<span class="operator">div</span> style=<span class="string">"background-color:green; width:50px;"</span>&gt;</div><div class="line">    <span class="keyword">after</span> B</div><div class="line">&lt;/<span class="operator">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/o1gqj3jn/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>为了方便观察结果我添加了一个 “before A” 和 “after B”<br>由上结果观察到：before A 与 A 间距 90px; A 与 B 间距 80px; B 与 after B 间距 80px;</p>
<p>错误的计算方式：算 A 和 B 之间的 margin，分别算 A 和其父元素的折叠，然后与其父元素的父元素的折叠，这个值算出来之后，应该是 90px。依此法算出 B 的为 80px；然后，A和B折叠，margin 为 90px。</p>
<p>请注意，多个 margin 相邻折叠成一个 margin，所以计算的时候，应该取所有相关的值一起计算，而不能分开分步来算。</p>
<p>以上例子中，A 和 B 之间的 margin 折叠产生的 margin，是6个相邻 margin 折叠的结果。将其 margin 值分为两组：</p>
<ul>
<li>正值：50px，150px，200px</li>
<li>负值：-60px，-100px，-120px<br>根据有正有负时的计算规则，正值的最大值为 200px，负值中绝对值最大的是 -120px，所以，最终折叠后的 margin 应该是 200 + (-120) = 80px。</li>
</ul>
<h4 id="不发生margin折叠的情况">不发生margin折叠的情况</h4>
<h3 id="浮动元素、inline-block_元素、绝对定位元素">浮动元素、inline-block 元素、绝对定位元素</h3>
<p><strong>浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠</strong><br>浮动元素的 margin 在垂直方向上也不会发生 margin 折叠，即使和它相邻的子元素也不会。<br>DEMO-6(浮动元素margin不折叠):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"margin-bottom:50px; width:50px; height:50px; background-color:green;"</span>&gt;A&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"margin-top:50px; width:100px; height:100px; background-color:green; float:left;"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> style=<span class="string">"margin-top:50px; background-color:gold;"</span>&gt;B&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/w19dre3r/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>两个绿色的块儿之间，相距100px，显然B与A之间没有发生折叠，而若 B 和它的浮动包含块发生 margin 折叠的话，金色的条应该位于绿色块的最上方，显然，没有发生折叠。</p>
<h4 id="创建了块级格式化上下文的元素">创建了块级格式化上下文的元素</h4>
<p><strong>创建了块级格式化上下文的元素，不和它的子元素发生 margin 折叠</strong><br>块级格式化上下文:<a href="http://www.w3.org/TR/CSS2/visuren.html#block-formatting" target="_blank" rel="external">http://www.w3.org/TR/CSS2/visuren.html#block-formatting</a><br>DEMO-7(以”overflow : hidden” 的元素为例):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"margin-top:50px; width:100px; height:100px; background-color:green; overflow:hidden;"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> style=<span class="string">"margin-top:50px; background-color:gold;"</span>&gt;B&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/bkjyy0yg/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>若 B 和它的 “overflow:hidden” 包含块发生 margin 折叠的话，金色的条应该位于绿色块的最上方，此例中显然没有折叠。</p>
<h4 id="元素自身的margin折叠">元素自身的margin折叠</h4>
<p><strong>元素自身的 margin-bottom 和 margin-top 相邻时也会折叠</strong><br>自身 margin-bottom 和 margin-top 相邻，只能是自身内容为空，垂直方向上 border、padding 为 0。</p>
<p>DEMO-8(元素自身的 margin-bottom 和 margin-top折叠):</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> style=<span class="string">"border:1px solid red; width:100px;"</span>&gt;</div><div class="line">    &lt;<span class="keyword">div</span> style=<span class="string">"margin-top: 100px;margin-bottom: 50px;"</span>&gt;&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/zn7yd2te/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>由上结果观察到：红框框里面的div的margin-bottom 和 margin-top折叠了，因为如果不折叠他的高会是150px，折叠之后它的高为100px。红色框框div的宽为100px，结果刚好是个正方形。</p>
<hr>
<h3 id="内容的尺寸与元素框的总尺寸">内容的尺寸与元素框的总尺寸</h3>
<p>在 CSS 中，width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。</p>
<p>假设框的每个边上有 10 个像素的外边距和 5 个像素的内边距。如果希望这个元素框达到 100 个像素，就需要将内容的宽度设置为 70 像素,请看下图。<br><img src="/img/CSS/boxmodelsize.gif" alt="盒模型"></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="id">#box</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>当你设置了元素的宽度，实际展现的元素却能够超出你的设置：因为元素的边框和内边距会撑开元素。<br>DEMO:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class">.simple</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="class">.fancy</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/sqhz2dqh/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>以前有一个代代相传的解决方案是数学。CSS开发者需要用比他们实际想要的宽度小一点的宽度，需要减去内边距和边框的宽度。值得庆幸地是你不需要再这么做了…</p>
<h3 id="CSS3属性：box-sizing">CSS3属性：box-sizing</h3>
<p>当你设置一个元素为 box-sizing: border-box; 时，此元素的内边距和边框不再会增加它的宽度。这里有一个与上例相同的例子，唯一的区别是两个元素都设置了 box-sizing: border-box;<br>DEMO:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class">.simple</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">     <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"></div><div class="line"><span class="class">.fancy</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">50px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">border-width</span>:<span class="value"> <span class="number">10px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">     <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/4vgsw2xu/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>此时两个div不含margin的width都为500px，这就和我们设置的值一样了。</p>
<p>既然没有比这更好的方法，一些CSS开发者想要页面上所有的元素都有如此表现。所以开发者们把以下CSS代码放在他们页面上：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">     <span class="rule"><span class="attribute">-moz-box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">box-sizing</span>:<span class="value"> border-box</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>这样可以确保所有的元素都会用这种更直观的方式排版。</p>
<p>既然 box-sizing 是个很新的属性，目前你还应该像我之前在例子中那样使用 -webkit- 和 -moz- 前缀。这可以启用特定浏览器实验中的特性。同时记住它是支持IE8+。</p>
<hr>
<h2 id="position属性">position属性</h2>
<h3 id="position属性值">position属性值</h3>
<p><strong>static</strong><br>元素框正常生成。块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。<br>DEMO-1(static)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class">.static</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> static</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/oeyc2bu6/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>relative</strong><br>元素框偏移某个距离。元素仍保持其未定位前的形状，它原本所占的空间仍保留。<br>DEMO-2(relative)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class">.relative1</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.relative2</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> -<span class="number">20px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">20px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> white</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/82agccp1/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>absolute</strong><br>元素框从文档流完全删除，并相对于其包含块定位。包含块可能是文档中的另一个元素或者是初始包含块。元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。<br>absolute 是最棘手的position值。 absolute 与 fixed 的表现类似，除了它不是相对于视窗而是相对于最近的“positioned”祖先元素。<br>如果绝对定位（position属性的值为absolute）的元素没有“positioned”祖先元素，那么它是相对于文档的 html 标签 (参考的文档说是相对于文档的 body 元素，之后我将会说为什么我认为是相对html标签)，并且它会随着页面滚动而移动。<br>记住一个“positioned”元素是指position 值不是 static 的元素。<br>DEMO-3(absolute)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class">.relative</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">600px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">400px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.absolute</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">120px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/ucn9nwxw/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>为什么上面我说绝对定位子元素在没有“positioned”祖先元素时是相对 html 标签 而不是 body元素呢？我们修改一下上例把position:relative 的div 改成 position:static,结果如下：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/yys8bo4z/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>absolute的元素的top为120px;以下截图一目了然：<br><img src="/img/CSS/position-absolute1.png" alt="position-absolute1"><br><img src="/img/CSS/position-absolute2.png" alt="position-absolute2"><br>所以我认为是相对于html标签才对。。。</p>
<p><strong>fixed</strong><br>元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身。即便页面滚动，它还是会停留在相同的位置。<br>DEMO-4(fixed)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class">.fixed</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> white</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/thg4otsx/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>一个固定定位元素不会保留它原本在页面应有的空隙。</p>
<p>令人惊讶地是移动浏览器对 fixed 的支持很差。<a href="http://bradfrostweb.com/blog/mobile/fixed-position/" target="_blank" rel="external">这里有相应的解决方案</a>。</p>
<h3 id="position例子-左固定宽度，右自适应宽度">position例子-左固定宽度，右自适应宽度</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class">.container</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">nav</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">section</span> <span class="rules">{</span></div><div class="line">  <span class="comment">/* position is static by default */</span></div><div class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">footer</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">bottom</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">70px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">background-color</span>:<span class="value"> white</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">body</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">120px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/kcywvs2z/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>这个例子在容器比nav元素高的时候可以正常工作。如果容器比nav元素低，那么nav会溢出到容器的外面。之后我们会讨论下其他布局技术，它们都各有优劣。</p>
<hr>
<h2 id="float">float</h2>
<p>float很熟悉了，不举例了。可以用作文字环绕图片，float布局很常用。<br>其中、最棘手的应该算是清除浮动了。</p>
<h3 id="如何清除浮动？">如何清除浮动？</h3>
<h3 id="float例子-左固定宽度，右自适应宽度">float例子-左固定宽度，右自适应宽度</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">nav</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">section</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>给最外的框框添加清除浮动的class：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"."</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/x2xjLpae/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h2 id="百分比宽度">百分比宽度</h2>
<p>百分比是一种相对于包含块的计量单位。它对图片很有用：如下我们实现了图片宽度始终是容器宽度的50%。把页面缩小看下效果！</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">article</span> <span class="tag">img</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>图片要放在文字前哦。不然就没有图片在文字右边这种效果啦…<br>再复习一遍，别忘了给article元素加清除浮动的class：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class">.clearfix</span><span class="pseudo">:after</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">"."</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">0</span></span></span>;</div><div class="line">    <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/tw97t7xa/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="百分比宽度布局-左固定百分比右自适应">百分比宽度布局-左固定百分比右自适应</h3>
<p>在下面的例子中，当窗口宽度很窄时 nav 的内容会以一种不太友好的方式被包裹起来。总而言之，选一种最合适你的内容的方式。<br>下面例子 与 float例子-左固定宽度，右自适应宽度 这个例子基本一样，就是把像素换成百分比。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">nav</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">section</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>还是别忘了清除浮动。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/5hbse4vw/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>以上做法不是很优雅，接下来来看一种更酷的做法~</p>
<h2 id="媒体查询">媒体查询</h2>
<p>“响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“响应”不同显示效果的策略，这样可以让网站在任何情况下显示的很棒！</p>
<p>媒体查询是做此事所需的最强大的工具。让我们使用百分比宽度来布局，然后在浏览器变窄到无法容纳侧边栏中的菜单时，把布局显示成一列：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) </span>{</div><div class="line">  <span class="tag">nav</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  <span class="tag">section</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div><div class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-width:<span class="number">599px</span>) </span>{</div><div class="line">  <span class="tag">nav</span> <span class="tag">li</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>还是别忘了清除浮动。</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/pmxd2gtq/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>当屏幕宽度大于等于 600px 时会使用这段CSS:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (min-width:<span class="number">600px</span>) </span>{</div><div class="line">  <span class="tag">nav</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">  <span class="tag">section</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>否则将使用这段CSS:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="at_rule">@<span class="keyword">media</span> screen and (max-width:<span class="number">599px</span>) </span>{</div><div class="line">  <span class="tag">nav</span> <span class="tag">li</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline</span></span>;</div><div class="line">  <span class="rule">}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在我们的布局在移动浏览器上也显示的很棒。这里有一些 <a href="http://mediaqueri.es/" target="_blank" rel="external">同样使用了媒体查询的著名站点</a>。在<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="external">MDN文档</a>中你还可以学到更多有关媒体查询的知识。</p>
<p><strong>另</strong>：使用 <a href="http://dev.opera.com/articles/an-introduction-to-meta-viewport-and-viewport/" target="_blank" rel="external">meta viewport</a> 之后可以让你的布局在移动浏览器上显示的更好。关于移动web的总结实践我将在不久的将来整理 O(∩_∩)O~</p>
<hr>
<h2 id="inline-block">inline-block</h2>
<p>你可以创建很多网格来铺满浏览器。在过去很长的一段时间内使用 float 是一种选择，但是使用 inline-block 会更简单。让我们看下使用这两种方法的例子：</p>
<p><strong>困难的方式（使用浮动）：</strong></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.box</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.after-box</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">clear</span>:<span class="value"> left</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/ksLh608q/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>容易的方式（使用 inline-block）：</strong></p>
<p>你可以用 display 属性的值 inline-block 来实现相同效果。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class">.box2</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/qgbqfxd2/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>了解更多：<a href="https://blog.mozilla.org/webdev/2009/02/20/cross-browser-inline-block/" target="_blank" rel="external">IE6和IE7支持 inline-block</a></p>
<h3 id="inline-block_布局-左固定百分比右自适应">inline-block 布局-左固定百分比右自适应</h3>
<p>使用 inline-block 来布局。有一些事情需要你牢记：</p>
<ul>
<li>vertical-align 属性会影响到 inline-block 元素，你可能会把它的值设置为 top 。</li>
<li>你需要设置每一列的宽度</li>
<li>如果HTML源代码中元素之间有空格，那么列与列之间会产生空隙</li>
</ul>
<p>DEMO:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">nav</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> top</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">25%</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.column</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> top</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">75%</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/sbct65Lo/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>



<h2 id="CSS3属性-column">CSS3属性-column</h2>
<p>这里有一系列新的CSS属性，可以帮助你很轻松的实现文字的多列布局。让我们瞧瞧：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class">.three-column</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-column-count</span>:<span class="value"> <span class="number">3</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-moz-column-gap</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-column-count</span>:<span class="value"> <span class="number">3</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">-webkit-column-gap</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">column-count</span>:<span class="value"> <span class="number">3</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">column-gap</span>:<span class="value"> <span class="number">1em</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/5wt4bc6j/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>CSS columns是很新的标准，所以你需要使用前缀，并且它不被<a href="http://caniuse.com/#search=column" target="_blank" rel="external">IE9及以下和Opera Mini</a>支持。还有许多和 cloumn 相关的属性，<a href="http://quirksmode.org/css/columns/" target="_blank" rel="external">点击这里了解更多</a>。</p>
<h2 id="flexbox">flexbox</h2>
<p>新的 flexbox 布局模式被用来重新定义CSS中的布局方式。很遗憾的是最近规范变动过多，导致各个浏览器对它的实现也有所不同。不过我仍旧想要分享一些例子，来让你知道即将发生的改变。这些例子目前只能在支持 flexbox 的 Chrome 浏览器中运行，基于 <a href="http://www.w3.org/TR/css3-flexbox/" target="_blank" rel="external">最新的标准</a>。</p>
<p>网上有不少过时的 flexbox 资料。 如果你想要了解更多有关 flexbox 的内容，<a href="http://css-tricks.com/old-flexbox-and-new-flexbox/" target="_blank" rel="external">从这里</a>学习如何辨别一份资料是否过时。此参考文献作者已经写了一份<a href="http://bocoup.com/weblog/dive-into-flexbox/" target="_blank" rel="external">关于最新标准的详细文章</a>。</p>
<p>使用flexbox你还可以做的更多；这里只是一些让你了解概念的例子：</p>
<h3 id="使用_Flexbox_的简单布局">使用 Flexbox 的简单布局</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class">.container</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="tag">nav</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.flex-column</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/s6643new/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<h3 id="使用_Flexbox_的牛逼布局">使用 Flexbox 的牛逼布局</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class">.container</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.initial</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> initial</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex</span>:<span class="value"> initial</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line">  <span class="rule"><span class="attribute">min-width</span>:<span class="value"> <span class="number">100px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.none</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> none</span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex</span>:<span class="value"> none</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.flex1</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.flex2</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">-webkit-flex</span>:<span class="value"> <span class="number">2</span></span></span>;</div><div class="line">          <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">2</span></span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/prg6gac9/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<h3 id="使用_Flexbox_的居中布局">使用 Flexbox 的居中布局</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class">.vertical-container</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> -webkit-flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;</div><div class="line">  <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="class">.vertically-centered</span> <span class="rules">{</span></div><div class="line">  <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/6pjedh20/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<hr>
<p>参考文献：<br><a href="http://zh.learnlayout.com" target="_blank" rel="external">[1] 学习CSS布局</a><br><a href="http://w3help.org/zh-cn/kb/006/" target="_blank" rel="external">[2] CSS 框模型( Box module )</a><br><a href="http://w3help.org/zh-cn/kb/006/" target="_blank" rel="external">[3] CSS 框模型概述</a><br><a href="http://www.w3school.com.cn/css/css_boxmodel.asp" target="_blank" rel="external">[4] 网页布局基础</a></p>
]]></content>
    
    
      <category term="CSS" scheme="http://snailsky.me/tags/CSS/"/>
    
      <category term="总结" scheme="http://snailsky.me/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="CSS" scheme="http://snailsky.me/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【CSS】浮动和它的工作原理？清除浮动的技巧？]]></title>
    <link href="http://snailsky.me/2014/08/20/%E6%B5%AE%E5%8A%A8%E5%92%8C%E5%AE%83%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%EF%BC%9F%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%8A%80%E5%B7%A7%EF%BC%9F/"/>
    <id>http://snailsky.me/2014/08/20/浮动和它的工作原理？清除浮动的技巧？/</id>
    <published>2014-08-20T08:46:45.000Z</published>
    <updated>2014-09-15T10:39:33.000Z</updated>
    <content type="html"><![CDATA[<p>学习总结浮动和它的工作原理，及清除浮动的方法及原理集锦。探索浮动与清除浮动的奥妙。</p>
<hr>
<h2 id="浮动和它的工作原理">浮动和它的工作原理</h2>
<p>“浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。<br>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。”</p>
<p>— <a href="http://www.w3school.com.cn/css/css_positioning_floating.asp" target="_blank" rel="external">W3School</a></p>
<p>浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个浮动框的边缘。浮动框不属于文档中的普通流，当一个元素浮动之后，不会影响到块级框的布局而只会影响内联框（通常是文本）的排列，文档中的普通流就会表现得和浮动框不存在一样，当浮动框高度超出包含框的时候，也就会出现包含框不会自动伸高来闭合浮动元素（“高度塌陷”现象）。顾名思义，就是漂浮于普通流之上，像浮云一样，但是只能左右浮动。</p>
<hr>
<h3 id="浮动布局：">浮动布局：</h3>
<ul>
<li>浮动布局是CSS中规定的第二种定位机制。 (<a href="http://www.w3school.com.cn/css/css_positioning.asp" target="_blank" rel="external">CSS 有三种基本的定位机制：普通流、浮动和绝对定位。</a>)</li>
<li>能够实现横向多列布局。（常见的为横向两列布局，横向三列布局）</li>
<li>通过设置float属性实现。</li>
</ul>
<hr>
<h3 id="float属性：">float属性：</h3>
<p><em>3个属性值</em>：</p>
<ul>
<li>left   -  左浮动</li>
<li>right -  右浮动</li>
<li>none  -  不浮动</li>
</ul>
<p><em>特点</em>：<br>元素会左移，或右移，直至触碰到容器为止。<br><em>设置了浮动的元素仍旧处于标准文档流中。</em>会占据标准文档流空间，对其他元素有影响。</p>
<p>浮动DEMO-1 (box1左浮动)：</p>
<iframe width="100%" height="150" src="http://jsfiddle.net/snbdxb77/1/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>上例box1设置了float:left; 和 height:100px;<br>当box1没有内容的时候,float:left;的作用使得此div尺寸得不到扩展，将缩成一个小圆点出现在body标签的左上角。<br>box1沿着它的容器(此例中box1的容器为body标签)左浮动。</p>
<p>浮动DEMO-2 (box1左浮动)：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/f50po7oc/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>浮动DEMO-3 (box1左浮动,box2右浮动)：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/u20Lgvw6/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>浮动DEMO-4 (box1左浮动,box2左浮动)：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/0wrnqpqf/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>浮动DEMO-5 (box1,box2都不浮动，且都在class=”wrap”的div容器中)：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/zq4z8sgL/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>浮动DEMO-6 (box1,box2左浮动，且都在class=”wrap”的div容器中)：</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/uatxp09q/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>


<p>浮动DEMO-5、浮动DEMO-6 观察class=”wrap”的元素的黑色的border，DEMO-5中的wrap为正常高度，DEMO-6中wrap的高度为0。</p>
<p><em>为什么会出现“高度塌陷”这样的现象？</em></p>
<p>我们先看看什么是浮动：<br>浮动：浮动的框可以左右移动，直至它的外边缘遇到包含框或者另一个浮动框的边缘。浮动框不属于文档中的普通流，当一个元素浮动之后，不会影响到块级框的布局而只会影响内联框（通常是文本）的排列，文档中的普通流就会表现得和浮动框不存在一样，当浮动框高度超出包含框的时候，也就会出现包含框不会自动伸高来闭合浮动元素（“高度塌陷”现象）。顾名思义，就是漂浮于普通流之上，像浮云一样，但是只能左右浮动。</p>
<p>正是因为浮动的这种特性，导致本属于普通流中的元素浮动之后，包含框内部由于不存在其他普通流元素了，也就表现出高度为0（高度塌陷）。在实际布局中，往往这并不是我们所希望的，所以需要闭合浮动元素，使其包含框表现出正常的高度。</p>
<p><em>总结</em>：</p>
<ul>
<li>当元素没有设置宽度值，而设置了浮动属性，元素的宽度随内容的宽度的变化而变化。</li>
<li>当元素设置浮动属性后，会对相邻的元素产生影响，相邻元素特指紧邻后面的元素。</li>
<li>当一个包含框中的元素全设置了浮动时，改包含框会出现“高度塌陷”现象。</li>
</ul>
<p><em>思考</em>：<br>当设置浮动元素时，紧邻其后的元素会受到浮动元素的影响，且其父元素可能出现高度塌陷，这样可能会使布局错乱，所以我们需要想办法来清除浮动。</p>
<hr>
<h2 id="怎样清除浮动呢？">怎样清除浮动呢？</h2>
<p>首先我们先弄清楚一下概念，其实大家习惯称为“清除浮动”实际上应该称作“闭合浮动”。</p>
<ul>
<li>清除浮动：清除对应的单词是 clear，对应CSS中的属性是 clear：left | right | both | none；</li>
<li>闭合浮动：更确切的含义是使浮动元素闭合，从而减少浮动带来的影响。</li>
</ul>
<p>我们想要达到的效果确切的说是闭合浮动，而不是单纯的清除浮动，单纯的清除浮动，并不能解决容器高度塌陷的问题。</p>
<hr>
<h3 id="闭合浮动的方法：">闭合浮动的方法：</h3>
<h4 id="方法一（差）：添加额外标签">方法一（差）：添加额外标签</h4>
<p>在浮动元素末尾添加一个新标签，例如：<br>&lt;div style=”clear:both;”&gt;&lt;/div&gt;  (清除float:left 和 float:right的影响)<br>&lt;div style=”clear:left;”&gt;&lt;/div&gt;  (清除float:left的影响，如果是float:right造成的浮动影响这样写无用)<br>&lt;div style=”clear:right;”&gt;&lt;/div&gt; (清除float:right的影响，如果是float:left造成的浮动影响这样写无用)<br>其他标签br等亦可，看情况加入n个br标签(极不推荐，因为高度变了，代码也要变，维护起来要抓狂的)</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/8v4hnst4/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>优点</strong>：通俗易懂，容易掌握<br><strong>缺点</strong>：将添加很多无意义的空标签，有违结构与表现的分离，后期维护会是噩梦。</p>
<h4 id="方法二（差）：使用br标签及自身html属性">方法二（差）：使用br标签及自身html属性</h4>
<p>这个方法有些小众，br 有 clear=“all | left | right | none” 属性<br>&lt;br clear=”all” /&gt;  (清除float:left 和 float:right的影响)<br>&lt;br clear=”left “ /&gt;  (清除float:left的影响，如果是float:right造成的浮动影响这样写无用)<br>&lt;br clear=”right” /&gt; (清除float:right的影响，如果是float:left造成的浮动影响这样写无用)</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/skbkr76d/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>优点</strong>：比空标签方式语义稍强，代码量较少<br><strong>缺点</strong>：同样有违结构与表现的分离，不推荐使用</p>
<h4 id="方法三（差）：父元素设置overflow属性">方法三（差）：父元素设置overflow属性</h4>
<p>通过设置父元素overflow值设置为hidden;在IE6中还需要触发hasLayout，例如zoom：1;</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/oudou0uv/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>通过设置父元素overflow值设置为auto;在IE6中还需要触发hasLayout，例如zoom：1;</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/nwsqafLt/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>优点</strong>：不存在结构和语义化问题，代码量极少<br><strong>缺点</strong>：overflow:hidden; 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素；不要使用<br>overflow:auto; 多层嵌套后，firefox与IE 可能会出现显示错误；不要使用</p>
<h4 id="方法四（差）：父元素也设置浮动">方法四（差）：父元素也设置浮动</h4>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/czfcank0/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>优点</strong>：不存在结构和语义化问题，代码量极少<br><strong>缺点</strong>：使得与父元素相邻的元素的布局会受到影响，不可能一直浮动到body，不推荐使用</p>
<h4 id="方法五（差）：父元素设置display:table">方法五（差）：父元素设置display:table</h4>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/4jm62zr2/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p><strong>优点</strong>：结构语义化完全正确，代码量极少<br><strong>缺点</strong>：盒模型属性已经改变，由此造成的一系列问题，得不偿失，不推荐使用</p>
<h4 id="方法六（可）：使用:after伪元素">方法六（可）：使用:after伪元素</h4>
<p><a href="http://www.w3school.com.cn/cssref/pr_pseudo_after.asp" target="_blank" rel="external">:after 伪元素在元素之后添加内容。</a><br>IE6-7不支持:after,使用zoom:1触发 hasLayout。<br>详细请看：<a href="http://www.positioniseverything.net/easyclearing.html" target="_blank" rel="external">How To Clear Floats Without Structural Markup</a></p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/pqz7y0m4/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>1) display:block 使生成的元素以块级元素显示,占满剩余空间;<br>2) height:0 避免生成内容破坏原有布局的高度。<br>3) visibility:hidden 使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;<br>4）通过 content:”.”生成内容作为最后一个元素，至于content里面是点还是其他都是可以的，例如oocss里面就有经典的 content:”XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX”,有些版本可能content 里面内容为空,不推荐这样做的,firefox直到7.0 content:”” 仍然会产生额外的空隙；<br>5）zoom：1 触发IE hasLayout。<br>通过分析发现，除了clear：both用来闭合浮动的，其他代码无非都是为了隐藏掉content生成的内容，这也就是其他版本的闭合浮动为什么会有font-size：0，line-height：0。</p>
<p>优化方案一：<br>相对于空标签闭合浮动的方法代码似乎还是有些冗余，通过查询发现Unicode字符里有一个“零宽度空格”，也就是<a href="http://www.fileformat.info/info/unicode/char/200b/index.htm" target="_blank" rel="external">U+200B</a>，这个字符本身是不可见的，所以我们完全可以省略掉 visibility:hidden了</p>
<p>DEMO:</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/running_snail/ruym187v/embedded/result,js,html,css" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>优化方案二：<br>参看：<a href="http://nicolasgallagher.com/micro-clearfix-hack/" target="_blank" rel="external">A new micro clearfix hack</a></p>
<p><strong>优点</strong>：结构和语义化完全正确,代码量居中<br><strong>缺点</strong>：复用方式不当会造成代码量增加</p>
<hr>
<h3 id="闭合浮动的原理：">闭合浮动的原理：</h3>
<p>以上方法，分为两类：</p>
<ol>
<li>在浮动元素末尾添加一个空元素 (方法一，二，六)</li>
<li>设置父元素overflow 或者 display:table 来闭合浮动 (方法三，四，五)</li>
</ol>
<p>为什么设置父元素overflow 或者 display:table 可以闭合浮动?<br>其原理为<br><a href="http://www.w3.org/TR/CSS21/visuren.html#block-formatting" target="_blank" rel="external"> Block formatting contexts </a>（块级格式化上下文），以下简称 BFC。<br>CSS3里面对这个规范做了改动，称之为：<a href="http://www.w3.org/TR/css3-box/#block-level0" target="_blank" rel="external"> flow root </a>，并且对触发条件进行了进一步说明。</p>
<p><strong>如何触发BFC?</strong></p>
<ul>
<li>float 除了none以外的值</li>
<li>overflow 除了visible 以外的值（hidden，auto，scroll ）</li>
<li>display (table-cell，table-caption，inline-block)</li>
<li>position（absolute，fixed）</li>
<li>fieldset元素</li>
</ul>
<p>需要注意的是，display:table 本身并不会创建BFC，但是它会产生匿名框(anonymous boxes)，而匿名框中的display:table-cell可以创建新的BFC，换句话说，触发块级格式化上下文的是匿名框，而不是display:table。所以通过display:table和display:table-cell创建的BFC效果是不一样的。<br>fieldset 元素在www.w3.org里目前没有任何有关这个触发行为的信息，直到HTML5标准里才出现。有些浏览器bugs（Webkit，Mozilla）提到过这个触发行为，但是没有任何官方声明。实际上，即使fieldset在大多数的浏览器上都能创建新的块级格式化上下文，开发者也不应该把这当做是理所当然的。CSS 2.1没有定义哪种属性适用于表单控件，也没有定义如何使用CSS来给它们添加样式。用户代理可能会给这些属性应用CSS属性，建议开发者们把这种支持当做实验性质的，更高版本的CSS可能会进一步规范这个。</p>
<p>BFC的特性：</p>
<ul>
<li>块级格式化上下文会阻止外边距叠加<br>当两个相邻的块框在同一个块级格式化上下文中时，它们之间垂直方向的外边距会发生叠加。换句话说，如果这两个相邻的块框不属于同一个块级格式化上下文，那么它们的外边距就不会叠加。</li>
<li>块级格式化上下文不会重叠浮动元素<br>根据规定，一个块级格式化上下文的边框不能和它里面的元素的外边距重叠。这就意味着浏览器将会给块级格式化上下文创建隐式的外边距来阻止它和浮动元素的外边距叠加。由于这个原因，当给一个挨着浮动的块级格式化上下文添加负的外边距时将会不起作用（Webkit和IE6在这点上有一个问题——可以看这个测试用例）。</li>
<li>块级格式化上下文通常可以包含浮动<br>详见： W3C CSS2.1 - 10.6.7 <a href="http://www.w3.org/TR/CSS2/visudet.html#root-height" target="_blank" rel="external">‘Auto’ heights for block formatting context roots</a></li>
</ul>
<p>通俗地来说：创建了 BFC的元素就是一个独立的盒子，里面的子元素不会在布局上影响外面的元素，反之亦然，同时BFC任然属于文档中的普通流。<br>overflow:hidden或者auto可以闭合浮动，就是因为父元素创建了新的BFC。</p>
<p>IE专有属性hadLayout，没有做过IE 不了解，关于hadLayout来这看：<a href="http://www.smallni.com/haslayout-block-formatting-contexts/" target="_blank" rel="external">hasLayout &amp;&amp; Block Formatting Contexts</a></p>
<hr>
<p>参考文献：<br><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="external">[1] 那些年我们一起清除过的浮动</a><br><a href="http://www.yuiblog.com/blog/2010/05/19/css-101-block-formatting-contexts" target="_blank" rel="external">[2] CSS 101: Block Formatting Contexts</a><br><a href="http://stackoverflow.com/questions/211383/which-method-of-clearfix-is-best" target="_blank" rel="external">[3] Which method of ‘clearfix’ is best? - Stack Overflow</a></p>
]]></content>
    
    
      <category term="CSS" scheme="http://snailsky.me/tags/CSS/"/>
    
      <category term="原理" scheme="http://snailsky.me/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="技巧" scheme="http://snailsky.me/tags/%E6%8A%80%E5%B7%A7/"/>
    
      <category term="stackoverflow" scheme="http://snailsky.me/tags/stackoverflow/"/>
    
      <category term="CSS" scheme="http://snailsky.me/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[【CSS】display:none 和 visibility:hidden 有何区别？]]></title>
    <link href="http://snailsky.me/2014/08/18/displaynone-%E5%92%8C-visibilityhidden-%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB%EF%BC%9F/"/>
    <id>http://snailsky.me/2014/08/18/displaynone-和-visibilityhidden-有何区别？/</id>
    <published>2014-08-18T13:09:51.000Z</published>
    <updated>2014-09-15T10:39:43.000Z</updated>
    <content type="html"><![CDATA[<p>在使用CSS隐藏一些元素时，常常用到 display:none 和 visibility:hidden<br>两者差别在哪儿？</p>
<h2 id="比较与实例">比较与实例</h2>
<h3 id="空间占据:">空间占据:</h3>
<p><em>display:none</em><br>隐藏后的元素不占据任何空间。它的宽度、高度等各种属性值都将“丢失”。<br><em>visibility:hidden</em><br>隐藏的元素空间依旧存在。它仍具有高度、宽度等属性值。</p>
<p><em>在线演示实例</em>：</p>
<iframe style="width: 100%; height: 300px" src="http://sandbox.runjs.cn/show/sxcwid89" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<hr>
<h3 id="前端性能:">前端性能:</h3>
<p><em>display:none</em><br>会触发reflow。<br><em>visibility:hidden</em><br>只会触发repaint，因为没有发现位置变化。</p>
<p><em>什么是reflow和repaint？</em>:<br>浏览器渲染时,JavaScript动态修改了DOM属性或是CSS属性会导致重新Layout，<br>有些改变不会，比如CSS rule没有被匹配到，等</p>
<p>这里比较重要的两个概念是 reflow（回流） 和 repaint（重绘）他们不是一回事。</p>
<ul>
<li>Repaint——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。</li>
<li>Reflow——意味着元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow）reflow 会从<html>这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。</html></li>
</ul>
<p>详情请看：<a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="external">浏览器的渲染原理简介</a></p>
<hr>
<h3 id="对子元素的影响:">对子元素的影响:</h3>
<p><em>display:none</em><br>一旦父节点元素应用了display:none，父节点及其子孙节点元素全部不可见，而且无论其子孙元素如何不屈地挣扎都无济于事。<br><em>visibility:hidden</em><br>给一个父元素应用visibility:hidden，则其子孙后代也都会全部不可见。不过存在隐藏“失效”的情况。当其子孙元素应用了visibility:visible，那么这个子孙元素又会显现出来。</p>
<hr>
<h3 id="是否加载？">是否加载？</h3>
<p>Q1:页面加载完毕后，浏览器会下载“mypic.jpg”图片吗？</p>
<p><em>HTML</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>CSS</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#test2</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">url</span>(<span class="string">'mypic.jpg'</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p>在jsfiddle上试了以上代码没有图片，但是可以通过Chrome开发者工具观察到，是否发送了加载图片的请求<br><img src="/img/CSS/1.jpg" alt="display:none"><br>答案是 YES。</p>
<hr>
<p>Q2:页面加载完毕后，浏览器会下载“mypic.jpg”图片吗？</p>
<p><em>HTML</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>CSS</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="id">#test2</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">url</span>(<span class="string">'mypic.jpg'</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><img src="/img/CSS/1.jpg" alt="display:none"><br>答案是 YES。</p>
<hr>
<p>Q3:页面加载完毕后，浏览器会下载“mypic.jpg”图片吗？</p>
<p><em>HTML</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"test1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"test2"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></div></pre></td></tr></table></figure>

<p><em>CSS</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="id">#test1</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;</div><div class="line"><span class="rule">}</span></div><div class="line"><span class="id">#test2</span> <span class="rules">{</span></div><div class="line">    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">url</span>(<span class="string">'mypic.jpg'</span>)</span></span>;</div><div class="line">    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;</div><div class="line"><span class="rule">}</span></div></pre></td></tr></table></figure>

<p><img src="/img/CSS/2.jpg" alt="display:none"><br>答案是 NO。</p>
<p><em>经试验可猜测</em>：样式中带有 display:none 和 visibility:hidden 的元素会被加载<br>不过display:none的子元素不会被加载。</p>
<hr>
<p>参考文献：<br><a href="http://blog.jobbole.com/12749/" target="_blank" rel="external">[1] 现代浏览器的工作原理</a><br><a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="external">[2] 浏览器的渲染原理简介</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/02/css-overflow-hidden-visibility-hidden-disabled-use/" target="_blank" rel="external">[3] 您可能不知道的CSS元素隐藏“失效”以其妙用</a><br><a href="http://davidshariff.com/quiz/" target="_blank" rel="external">[4] Front End Web Development Quiz</a></p>
]]></content>
    
    
      <category term="CSS" scheme="http://snailsky.me/tags/CSS/"/>
    
      <category term="区别" scheme="http://snailsky.me/tags/%E5%8C%BA%E5%88%AB/"/>
    
      <category term="原理" scheme="http://snailsky.me/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="stackoverflow" scheme="http://snailsky.me/tags/stackoverflow/"/>
    
      <category term="CSS" scheme="http://snailsky.me/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[那些年被我们误用的CSS选择器]]></title>
    <link href="http://snailsky.me/2014/07/22/%E9%82%A3%E4%BA%9B%E5%B9%B4%E8%A2%AB%E6%88%91%E4%BB%AC%E8%AF%AF%E7%94%A8%E7%9A%84CSS%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://snailsky.me/2014/07/22/那些年被我们误用的CSS选择器/</id>
    <published>2014-07-22T14:57:11.000Z</published>
    <updated>2014-08-24T11:21:12.000Z</updated>
    <content type="html"><![CDATA[<p>曾几何时，我天真的认为“选择器肯定是越详细，层数越多越好呗”。现在觉得自己以前真是图样图森破…<br>谨以此文，祭奠那些被我误用的CSS, orz。<br>此文重在讨论<em>如何书写高效的CSS选择器</em>。如有错误，欢迎指正，O(∩_∩)O</p>
<hr>
<h2 id="浏览如何识别选择器？">浏览如何识别选择器？</h2>
<p>“浏览器读取选择器的顺序是由右到左进行”—<a href="http://css-tricks.com/efficiently-rendering-css/" target="_blank" rel="external">《Efficiently Rendering CSS》Chris Coyier</a></p>
<p>例如：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">ul &gt;</span> li a[title=<span class="string">"home"</span>] {…}</span></div></pre></td></tr></table></figure>

<p>浏览器将首先解释 a[title=”home”]。这个最先解释选择器是最后被选择的元素的“关键选择器”。</p>
<p>再如：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">a img, div &gt;</span> p, h1 + [title] {…}</span></div></pre></td></tr></table></figure>

<p>此处关键选择器为 img，p，title</p>
<p>关键选择器示例：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="id">#main-navigation</span> <span class="rules">{<span class="rule">…}</span></span>            <span class="comment">/* ID (Fastest) */</span></div><div class="line"><span class="tag">body</span><span class="class">.home</span> <span class="id">#page-wrap</span> <span class="rules">{<span class="rule">…}</span></span>        <span class="comment">/* ID */</span></div><div class="line"><span class="class">.main-navigation</span> <span class="rules">{<span class="rule">…}</span></span>            <span class="comment">/* Class */</span></div><div class="line"><span class="tag">ul</span> <span class="tag">li</span> <span class="tag">a</span><span class="class">.current</span> <span class="rules">{<span class="rule">…}</span></span>             <span class="comment">/* Class *</span></div><div class="line">ul {…}                          /* Tag */</div><div class="line"><span class="tag">ul</span> <span class="tag">li</span> <span class="tag">a</span> <span class="rules">{<span class="rule">…}</span></span>                     <span class="comment">/* Tag */</span></div><div class="line">* <span class="rules">{<span class="rule">…}</span></span>                           <span class="comment">/* Universal (Slowest) */</span></div><div class="line"><span class="id">#content</span> <span class="attr_selector">[title='home']</span> <span class="rules">{<span class="rule">…}</span></span>     <span class="comment">/* Universal */</span></div></pre></td></tr></table></figure>

<p><em>越具体的关键选择器，其性能越高。 </em></p>
<h2 id="如何写有效率的CSS选择器？">如何写有效率的CSS选择器？</h2>
<h3 id="选择器效率排序">选择器效率排序</h3>
<p>选择器效率从高到低排列如下</p>
<ul>
<li>id选择器（#myid）</li>
<li>类选择器（.myclassname）</li>
<li>标签选择器（div,h1,p）</li>
<li>相邻选择器（h1+p）</li>
<li>子选择器（ul &gt; li）</li>
<li>后代选择器（li a）</li>
<li>通配符选择器（*）</li>
<li>属性选择器（a[rel=”external”]）</li>
<li>伪类选择器（a:hover,li:nth-child）</li>
</ul>
<h3 id="一些写高效CSS选择器的规则">一些写高效CSS选择器的规则</h3>
<h4 id="不要在ID选择器前加标签名或类">不要在ID选择器前加标签名或类</h4>
<p>如果一个规则的关键选择器是ID选择器，不要在其前面加上标签名或类名。因为ID是唯一的加上一个标签名会降低匹配速度。</p>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">button</span><span class="id">#backButton</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="id">#backButton</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.menu-left</span><span class="id">#newMenuIcon</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="id">#newMenuIcon</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<h4 id="不要在类前加标签名">不要在类前加标签名</h4>
<p>之前的观念依然适用，虽然类可在同个页面中被使用多次，但他们仍比标签稀罕。</p>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">div</span>.indented <span class="tuple">{…}</span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD  (tag+class命名法 缺点是不够灵活，如果改了标签类名也要换)</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.<span class="keyword">div</span>-indented <span class="tuple">{…}</span></div></pre></td></tr></table></figure>

<ul>
<li>BEST  (语义化的类名使其更灵活)</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.hierarchy-deep</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<h4 id="尽可能使用最具体的类别">尽可能使用最具体的类别</h4>
<ul>
<li>BAD (太多的规则导致查找速度变慢)</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">a</span><span class="attr_selector">[target=_blank]</span> &gt; <span class="tag">p</span> &gt; <span class="tag">span</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.span-target-blank</span> <span class="rules">{<span class="rule">…}</span></span></div></pre></td></tr></table></figure>

<h4 id="避免使用后代选择器">避免使用后代选择器</h4>
<p><em>后代选择器是CSS中代价最昂贵的选择器。</em>尤其是标签或是通配符选择器，它将昂贵的可怕。</p>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">table</span> tbody tr th {…}</div></pre></td></tr></table></figure>

<ul>
<li>BETTER,BUT STILL BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">table &gt;</span> tbody &gt; tr &gt; th {…}</span></div></pre></td></tr></table></figure>

<h4 id="标签分类规则不应该包含子元素选择器">标签分类规则不应该包含子元素选择器</h4>
<p>避免在标签类型规则使用子元素选择器。这会使匹配时间增多。</p>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="input"><span class="prompt">table &gt;</span> tbody &gt; tr &gt; th {…}</span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.th-<span class="built_in">table</span> {…}</div></pre></td></tr></table></figure>

<h4 id="避免使用通配符选择器">避免使用通配符选择器</h4>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.selected</span> * <span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div></pre></td></tr></table></figure>

<p>浏览器会匹配文档中所有元素，然后分别向上逐级匹配class为selected的元素，<br>知道文档的根节点，因此匹配花销是非常大的，通常比开销最小的ID选择器高出1~3个数量级，所以应避免使用关键选择器是通配选择器的规则。</p>
<h4 id="避免使用单规则的选择器">避免使用单规则的选择器</h4>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">.selected</span> <span class="attr_selector">[href=”#index”]</span> <span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;<span class="rule">}</span></span></div></pre></td></tr></table></figure>

<p>其匹配开销是非常大的，浏览器先匹配所有的元素，检查其是否有href属性并且herf属性值等于”#index”， 然后分别向上逐级匹配class为selected的元素，直到文档的根节点。所以应避免使用关键选择器是单规则属性选择器的规则。</p>
<h4 id="避免使用类正则的选择器">避免使用类正则的选择器</h4>
<p>CSS3添加了复杂的属性选择器，可以通过类正则表达式的方式对元素的属性值进行匹配。当然这些类型的选择器定是会影响性能的，正则表达式匹配会比基于类别的匹配会慢很多。大部分情况下我们应尽量避免使用 *=， |=， ^=， $=， 和 ~=语法的属性选择器。</p>
<h4 id="适当调整你的选择器">适当调整你的选择器</h4>
<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="id">#main-navigation</span> <span class="tag">li</span> <span class="tag">a</span> <span class="rules">{ <span class="rule"><span class="attribute">font-family</span>:<span class="value"> Georgia, Serif</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD (如果你需要的只是改变字体，这样写可能更有效)</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="id">#main-navigation</span> <span class="rules">{ <span class="rule"><span class="attribute">font-family</span>:<span class="value"> Georgia, Serif</span></span>; <span class="rule">}</span></span></div></pre></td></tr></table></figure>

<ul>
<li>BAD</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nav li a {…}</span></div></pre></td></tr></table></figure>

<ul>
<li>GOOD (如果要使用后代选择器，适当地缩小层级，降低CSS权重)</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#nav a{…}</span></div></pre></td></tr></table></figure>

<h3 id="笔者认为…">笔者认为…</h3>
<p>笔者认为虽然ID是最高效的选择器，不过如果把所有要选择的元素全都写上ID也是一件很蠢的事…<br>ID选择器权重太高，不存在任何可重用性，因此要尽量少用ID选择器。<br>笔者倾向于使用类选择器，简短且语义化的命名，同时书写模块化的CSS会使你的CSS更容易扩展和可重用。</p>
<hr>
<p>参考文献：<br><a href="http://www.w3cplus.com/css/css-selector-performance" target="_blank" rel="external">[1] CSS选择器的优化</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Writing_efficient_CSS" target="_blank" rel="external">[2] Writing efficient CSS</a><br><a href="http://css-tricks.com/efficiently-rendering-css/" target="_blank" rel="external">[3] Efficiently Rendering CSS</a><br><a href="http://www.alloyteam.com/2012/10/high-performance-css/" target="_blank" rel="external">[4] 高性能CSS</a><br><a href="http://www.w3cplus.com/css/css-specificity-things-you-should-know.html" target="_blank" rel="external">[5] 你应该知道的一些事情——CSS权重</a></p>
]]></content>
    
    
      <category term="CSS" scheme="http://snailsky.me/tags/CSS/"/>
    
      <category term="性能优化" scheme="http://snailsky.me/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="选择器" scheme="http://snailsky.me/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
      <category term="笔记" scheme="http://snailsky.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CSS" scheme="http://snailsky.me/categories/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Grunt的配置及liveReload功能实例]]></title>
    <link href="http://snailsky.me/2014/07/19/grunt%E7%9A%84%E9%85%8D%E7%BD%AE%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://snailsky.me/2014/07/19/grunt的配置及使用示例/</id>
    <published>2014-07-19T11:27:42.000Z</published>
    <updated>2014-08-24T11:21:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Grunt的介绍">Grunt的介绍</h2>
<p>Grunt是一个自动化的项目构建工具，配置好Grunt可以完成压缩，代码检查，单元测试等任务。C/C++有makefile，Java有Maven，Nodejs有grunt~</p>
<p>Grunt常用的插件有：<br>1).grunt-contrib-uglify：压缩js代码<br>2).grunt-contrib-concat：合并js文件<br>3).grunt-contrib-qunit：单元测试<br>4).grunt-contrib-jshint：js代码检查<br>5).grunt-contrib-watch：文件监控</p>
<p>关于这些插件的使用 <a href="http://blog.fens.me/nodejs-grunt-intro/" target="_blank" rel="external">grunt让Nodejs规范起来</a> 这篇文章已经做了详细的介绍，此就不多说了。</p>
<h2 id="完整实例">完整实例</h2>
<p>此实例完成的工作为：保存代码后网页自动刷新，即时查看代码效果</p>
<p>安装 grunt-cli(先保证nodejs安装完成)<br><img src="/img/gruntConfig/1.png" alt="grunt"><br>grunt-cli 安装完成<br><img src="/img/gruntConfig/2.png" alt="grunt"></p>
<p>全局安装grunt<br><img src="/img/gruntConfig/3.png" alt="grunt"></p>
<p>grunt安装完成<br><img src="/img/gruntConfig/4.png" alt="grunt"></p>
<p>安装grunt到本项目中<br><img src="/img/gruntConfig/6.png" alt="grunt"></p>
<p>安装完毕<br><img src="/img/gruntConfig/7.png" alt="grunt"></p>
<p>—save-dev自动将依赖写入了package.json</p>
<p>执行grunt 发现报错了<br><img src="/img/gruntConfig/8.png" alt="grunt"></p>
<p>原来是缺少gruntfile.js</p>
<p>创建gruntfile.js<br>(此处是livereload功能的示例，需下载这个chrome扩展程序，配合使用，功能：可以保存代码后网页自动刷新，即时查看代码效果）</p>
<p><img src="/img/gruntConfig/9.png" alt="grunt"></p>
<p>gruntfile.js 内容：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span><span class="params">(grunt)</span> </span>{</div><div class="line"> <span class="comment">// 项目配置(任务配置)</span></div><div class="line"> grunt.initConfig({</div><div class="line">                   pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</div><div class="line">                   watch: {</div><div class="line">                    client: {</div><div class="line">                     files: [<span class="string">'public/**/**/*'</span>, <span class="string">'public/*'</span>,<span class="string">'public/**/*'</span>,<span class="string">'views/*'</span>],</div><div class="line">                     options: {</div><div class="line">                      livereload: <span class="literal">true</span></div><div class="line">                     }</div><div class="line">                    }</div><div class="line">                   }</div><div class="line">                  });</div><div class="line"> <span class="comment">// 加载插件</span></div><div class="line"> grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line"> <span class="comment">// 自定义任务 即需执行： grunt live</span></div><div class="line"> grunt.registerTask(<span class="string">'live'</span>, [<span class="string">'watch'</span>]);</div><div class="line">};</div></pre></td></tr></table></figure>

<p>再次执行 又报错了<br><img src="/img/gruntConfig/10.png" alt="grunt"></p>
<p>是没找到grunt-contrib-watch 这个包</p>
<p>下载这个包<br><img src="/img/gruntConfig/11.png" alt="grunt"></p>
<p>下载完成<br><img src="/img/gruntConfig/12.png" alt="grunt"></p>
<p>再次执行grunt<br><img src="/img/gruntConfig/13.png" alt="grunt"></p>
<p>我们回来看下代码，发现 default 任务没有注册 ，<br>而我们自定义了live任务：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grunt.registerTask(<span class="string">'live'</span>, [<span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>

<p>你现在可以执行 grunt live 来执行这个任务<br><img src="/img/gruntConfig/15.png" alt="grunt"></p>
<p>你也可以创建一个default任务<br>如果创建default 这样创建 添加到gruntfile里</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Default task(s).</span></div><div class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'watch'</span>]);</div></pre></td></tr></table></figure>

<p>此时你可以 输入命令 grunt 或 grunt watch 来执行这个任务<br><img src="/img/gruntConfig/14.png" alt="grunt"></p>
<p>至此 启动你下载好的chrome livereload那个插件即可。<br>此时你就可以实时看代码效果，代码保存网页那边就刷新了，妈妈再也不用担心我玩命的按F5啦 ╮(╯▽╰)╭</p>
]]></content>
    
    
      <category term="grunt" scheme="http://snailsky.me/tags/grunt/"/>
    
      <category term="nodejs" scheme="http://snailsky.me/tags/nodejs/"/>
    
      <category term="安装" scheme="http://snailsky.me/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="笔记" scheme="http://snailsky.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="实践笔记" scheme="http://snailsky.me/categories/%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 学习笔记 - 模块化编程]]></title>
    <link href="http://snailsky.me/2014/07/12/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B/"/>
    <id>http://snailsky.me/2014/07/12/JavaScript学习笔记 - 模块化编程/</id>
    <published>2014-07-12T03:05:46.000Z</published>
    <updated>2014-08-24T11:21:12.000Z</updated>
    <content type="html"><![CDATA[<p>前段时间，我急需这种模块化的方法来管理我的JavaScript代码<br><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">Javascript模块化编程</a>这一系列文章给我很大帮助，介绍得很通俗易懂，小伙伴们可以看看，我将在此文基础上记录一些我的笔记。</p>
<hr>
<h2 id="JavaScript模块简介">JavaScript模块简介</h2>
<p>JavaScript不是一种模块化编程语言，它不支持“类”（class），更不用说“模块”（module）了。（正在制定中的ECMAScript标准第六版，将正式支持”类”和”模块”，但还需要很长时间才能投入实用。）</p>
<p>我们可以使用函数和闭包来构造模块。模块是一个提供接口却隐藏状态与实现的函数或对象。通过使用函数产生模块，我们几乎可以完全摒弃全局变量的使用，从而缓解这个JavaScript的最为糟糕的特性之一所带来的影响。</p>
<h2 id="JavaScript模块写法">JavaScript模块写法</h2>
<h3 id="立即执行函数">立即执行函数</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = (<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</div><div class="line">    <span class="keyword">var</span> setCount = <span class="function"><span class="keyword">function</span><span class="params">(start)</span></span>{</div><div class="line">        count=start;</div><div class="line">    }</div><div class="line">    <span class="keyword">var</span> getCount = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        setCount:setCount,</div><div class="line">        getCount:getCount,</div><div class="line">    }</div><div class="line">})();</div></pre></td></tr></table></figure>

<p>本例是JavaScript模块的基本写法。使用到了<a href="http://snailsky.me/2014/07/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E9%97%AD%E5%8C%85%EF%BC%88closure%EF%BC%89/" target="_blank" rel="external">闭包</a>。</p>
<p>此时外部代码无法读取内部的count变量。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(foo.<span class="built_in">count</span>);   //undefined</div></pre></td></tr></table></figure>

<h3 id="导入全局变量">导入全局变量</h3>
<p>把全局变量作为参数传递给一个立即执行函数，这样就完成了全局变量的导入，立即执行函数中可以使用此全局变量的方法，并可以修改（简化）全局变量的名称</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="list">(<span class="title">function</span> <span class="list">(<span class="title">$</span>, YAHOO)</span> <span class="collection">{</span></span></div><div class="line">	// now have access to globals jQuery <span class="list">(<span class="title">as</span> $)</span> and YAHOO in this code</div><div class="line">}<span class="list">(<span class="title">jQuery</span>, YAHOO)</span>)<span class="comment">;</span></div></pre></td></tr></table></figure>

<h3 id="导出模块">导出模块</h3>
<p>通过在立即执行函数中返回一个Object，将模块导出到全局空间供其他模块使用</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">	<span class="keyword">var</span> mod = {},</div><div class="line">		privateVariable = <span class="number">1</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span><span class="params">()</span> </span>{</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"this is a private method"</span>);</div><div class="line">	}</div><div class="line">	mod.moduleProperty = <span class="number">2</span>;</div><div class="line">	mod.moduleMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">		<span class="built_in">console</span>.log(privateVariable);       </div><div class="line">	};</div><div class="line">    mod.callPrivateMethod = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        privateMethod();</div><div class="line">    }</div><div class="line">	<span class="keyword">return</span> mod;</div><div class="line">}());</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">foo.moduleMethod(); <span class="comment">//output：1</span></div><div class="line"><span class="built_in">console</span>.log(foo.moduleProperty);  <span class="comment">//output：2</span></div><div class="line">foo.callPrivateMethod(); <span class="comment">//output："this is a private method"</span></div><div class="line">foo.privateMethod(); <span class="comment">//undefined</span></div><div class="line"><span class="built_in">console</span>.log(foo.privateVariable); <span class="comment">//undefined</span></div></pre></td></tr></table></figure>

<h3 id="方法的重写">方法的重写</h3>
<p>在“导出模块”例子基础上，重写他的moduleMethod方法..</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = (function (<span class="keyword">mod</span>) {</div><div class="line">	<span class="keyword">var</span> old_moduleMethod = <span class="keyword">mod</span>.moduleMethod;</div><div class="line">	<span class="keyword">mod</span>.moduleMethod = function () {</div><div class="line">		// <span class="keyword">method</span> override, has access to old through old_moduleMethod...</div><div class="line">        console.log(<span class="string">"this is already overridden"</span>);</div><div class="line">	};</div><div class="line">	<span class="keyword">return</span> <span class="keyword">mod</span>;</div><div class="line">}(foo));</div><div class="line"></div><div class="line">//test</div><div class="line">foo.moduleMethod(); //output：<span class="string">"this is already overridden"</span></div></pre></td></tr></table></figure>

<p>并且你可以在新方法中访问老方法，如果需要的话。</p>
<h3 id="克隆并重写方法">克隆并重写方法</h3>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cfoo = (<span class="function"><span class="keyword">function</span><span class="params">(old)</span></span>{</div><div class="line">    <span class="keyword">var</span> mod = {},</div><div class="line">		key;</div><div class="line">	<span class="keyword">for</span> (key <span class="keyword">in</span> old) {</div><div class="line">		<span class="keyword">if</span> (old.hasOwnProperty(key)) {</div><div class="line">			mod[key] = old[key];</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="keyword">var</span> super_moduleMethod = old.moduleMethod;</div><div class="line">	mod.moduleMethod = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{</div><div class="line">		<span class="comment">// override method on the clone, access to super through super_moduleMethod</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"this is a override method on the clone"</span>);</div><div class="line">	};</div><div class="line">	<span class="keyword">return</span> mod;</div><div class="line">})(foo);</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">foo.moduleMethod(); <span class="comment">//output：1</span></div><div class="line">cfoo.moduleMethod(); <span class="comment">//output："this is a override method on the clone"</span></div><div class="line">cfoo.callPrivateMethod(); <span class="comment">//output："this is a private method"</span></div></pre></td></tr></table></figure>

<p>此可以克隆某个模块并可根据自己需要重写其方法。</p>
<h3 id="模块的继承">模块的继承</h3>
<p>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块。在”立即执行函数”例子的基础上，继承bar。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = (<span class="function"><span class="keyword">function</span><span class="params">(mod)</span></span>{</div><div class="line">    mod.newFunc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"this is a new function"</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> mod;</div><div class="line">})(bar);</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(bar.getCount()); <span class="comment">//output：0</span></div><div class="line">bar.setCount(<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(bar.getCount()); <span class="comment">//output：4</span></div><div class="line">bar.newFunc(); <span class="comment">//output："this is a new function"</span></div></pre></td></tr></table></figure>

<p>我们看到可以访问foo中的老函数和新方法。那他可不可以访问foo中的私有变量呢？</p>
<p>let’s have a try…</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = (<span class="function"><span class="keyword">function</span><span class="params">(mod)</span></span>{</div><div class="line">    mod.newFunc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"this is a new function"</span>);</div><div class="line">    }</div><div class="line">    mod.testFunc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(count);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.count);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> mod;</div><div class="line">})(bar);</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">bar.testFunc(); <span class="comment">//两种访问count方式，结果都是undefined，即说明这种方法访问不到父模块的私有变量</span></div></pre></td></tr></table></figure>

<p><em>注意</em>：这种方法是访问不到父模块的私有变量的。</p>
<p>在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的写法，第一个执行的部分有可能加载一个不存在空对象。可以用一下方式解决：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bar = (<span class="function"><span class="keyword">function</span><span class="params">(mod)</span></span>{</div><div class="line">    mod.newFunc=<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"this is a new function"</span>);</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> mod;</div><div class="line">})(bar||{});</div></pre></td></tr></table></figure>

<h2 id="模块应用-单例模式">模块应用-单例模式</h2>
<p>模块模式通常结合单例模式（Singleton Pattern）使用。JavaScript的单例就是用对象字面量表示法创建的对象，对象的属性值可以试数值或函数，并且属性值在该对象的生命周期中不会发生变化。</p>
<p>单例的最佳实践：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Universe;</div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{    </div><div class="line">    <span class="keyword">var</span> instance;   </div><div class="line">    Universe = <span class="function"><span class="keyword">function</span> <span class="title">Universe</span><span class="params">()</span> </span>{        </div><div class="line">        <span class="keyword">if</span> (instance) {</div><div class="line">            <span class="keyword">return</span> instance;</div><div class="line">        }        </div><div class="line">        instance = <span class="keyword">this</span>;        </div><div class="line">        <span class="comment">// all the functionality</span></div><div class="line">        <span class="keyword">this</span>.start_time = <span class="number">0</span>;</div><div class="line">        <span class="keyword">this</span>.bang = <span class="string">"Big"</span>;</div><div class="line">    };</div><div class="line">}());</div></pre></td></tr></table></figure>

<p>测试一下一以上代码：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// testing</span></div><div class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe();</div><div class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe();</div><div class="line"><span class="built_in">console</span>.log(uni===uni2); <span class="comment">//output：true</span></div><div class="line"></div><div class="line"><span class="comment">// adding to the prototype</span></div><div class="line">Universe.prototype.nothing = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> uni = <span class="keyword">new</span> Universe();</div><div class="line"></div><div class="line"><span class="comment">// again adding to the prototype</span></div><div class="line"><span class="comment">// after the initial object is created</span></div><div class="line">Universe.prototype.everything = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> uni2 = <span class="keyword">new</span> Universe();</div><div class="line"></div><div class="line"><span class="comment">// linked to the objects</span></div><div class="line"><span class="built_in">console</span>.log(uni.nothing); <span class="comment">// output：true</span></div><div class="line"><span class="built_in">console</span>.log(uni2.nothing); <span class="comment">// output：true</span></div><div class="line"><span class="built_in">console</span>.log(uni.everything); <span class="comment">// output：true</span></div><div class="line"><span class="built_in">console</span>.log(uni2.everything); <span class="comment">// output：true</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(uni.constructor.name); <span class="comment">// output："Universe"</span></div><div class="line"><span class="built_in">console</span>.log(uni.constructor === Universe); <span class="comment">// output："Universe"</span></div></pre></td></tr></table></figure>

<p>我们发现new出来的两个Universe对象是同一个所以他们是同一个对象，实现了单例，且加进原型的属性在两个对象均可访问。</p>
<p>关于constructor：<br>constructor属性不影响任何JavaScript的内部属性。instanceof检测对象的原型链，通常你是无法修改的（不过某些引擎通过私有的<strong>proto</strong>属性暴露出来）。</p>
<p>constructor其实没有什么用处，只是JavaScript语言设计的历史遗留物。由于constructor属性是可以变更的，所以未必真的指向对象的构造函数，只是一个提示。不过，从编程习惯上，我们应该尽量让对象的constructor指向其构造函数，以维持这个惯例。</p>
<h2 id="模块的规范">模块的规范</h2>
<p>目前，通行的Javascript模块规范有：CommonJS（node.js应用此规范），AMD(异步模块定义)，CMD（通用模块定义）。<br>主要有两个Javascript库实现了AMD规范：require.js和curl.js。<br>实现了CMD规范：sea.js。</p>
<p>关于这些库和规范的讨论相关文章有：<br><a href="https://github.com/seajs/seajs/issues/277" target="_blank" rel="external">seaJS与RequireJS的异同</a><br><a href="http://www.zhihu.com/question/20351507/answer/14859415" target="_blank" rel="external">AMD 和 CMD 的区别有哪些？</a></p>
<p>先写到这，对于这些库，尚在了解中。等应用一阵再写相关的博文吧。</p>
<hr>
<p>参考文献：<br><a href="http://www.ruanyifeng.com/blog/2012/10/javascript_module.html" target="_blank" rel="external">[1] Javascript模块化编程</a><br><a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html" target="_blank" rel="external">[2] JavaScript Module Pattern: In-Depth</a><br><a href="http://book.douban.com/subject/2994925/" target="_blank" rel="external">[3] JavaScript - The Good Parts</a><br><a href="http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html" target="_blank" rel="external">[4] 深入理解JavaScript系列（25）：设计模式之单例模式</a><br><a href="https://github.com/shichuan/javascript-patterns/blob/master/design-patterns/singleton.html" target="_blank" rel="external">[5] javascript-patterns  singleton</a></p>
]]></content>
    
    
      <category term="JavaScript" scheme="http://snailsky.me/tags/JavaScript/"/>
    
      <category term="笔记" scheme="http://snailsky.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="JavaScript" scheme="http://snailsky.me/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 学习笔记 - 闭包（closure）]]></title>
    <link href="http://snailsky.me/2014/07/11/JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20-%20%E9%97%AD%E5%8C%85%EF%BC%88closure%EF%BC%89/"/>
    <id>http://snailsky.me/2014/07/11/JavaScript学习笔记 - 闭包（closure）/</id>
    <published>2014-07-11T12:59:40.000Z</published>
    <updated>2014-08-24T11:21:12.000Z</updated>
    <content type="html"><![CDATA[<p>本文本着3个目的进行探究<br>1.闭包是什么<br>2.为什么要用闭包<br>3.闭包的应用场景<br>我的傻瓜式学习笔记，给自己备忘，也希望能帮助到一些人，如有错误欢迎指正。O(∩_∩)O~</p>
<hr>
<h2 id="为什么要用闭包？">为什么要用闭包？</h2>
<h3 id="作用域">作用域</h3>
<p>函数是JavaScript中唯一拥有自身作用域的结构。（JavaScript不支持块级作用域）<br>意味着定义在函数中的参数和变量在函数外部是不可见的，而在一个函数内部任何位置定义的变量，在该函数内部任何地方都可见。</p>
<p>一个值得注意的例子：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> a = <span class="number">3</span>,b = <span class="number">5</span>;</div><div class="line">    <span class="keyword">var</span> bar = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">var</span> b = <span class="number">7</span>,c = <span class="number">11</span>;</div><div class="line">        <span class="comment">//此时，a为3，b为7，c为11。</span></div><div class="line">        a += b+c;</div><div class="line">        <span class="comment">//此时，a为21，b为7，c为11。</span></div><div class="line">    };</div><div class="line">    <span class="comment">//此时，a为3，b为5，而c还没有定义</span></div><div class="line">    bar();</div><div class="line">    <span class="comment">//此时，a为21，b为5</span></div><div class="line">};</div></pre></td></tr></table></figure>

<h4 id="函数访问全局变量">函数访问全局变量</h4>
<p>JavaScript中函数内部可以直接访问全局变量。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    <span class="built_in">console</span>.log(n);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">f1(); <span class="comment">// 999</span></div></pre></td></tr></table></figure>

<p>函数外部无法读取函数内的局部变量。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(m);    <span class="comment">// output：123</span></div><div class="line"><span class="built_in">console</span>.log(n);    <span class="comment">// undefined</span></div></pre></td></tr></table></figure>



<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">}</div><div class="line">f1();</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(m);    <span class="comment">// output：123</span></div><div class="line"><span class="built_in">console</span>.log(n);    <span class="comment">// undefined</span></div></pre></td></tr></table></figure>

<p><em>注意</em>：此时的n，如果声明时没有用var命令，在执行了声明它的函数后，事实上是产生了一个全局变量！</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    n=<span class="number">999</span>;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(m);    <span class="comment">// output：123</span></div><div class="line"><span class="built_in">console</span>.log(n);    <span class="comment">// undefined</span></div></pre></td></tr></table></figure>



<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    n=<span class="number">999</span>;</div><div class="line">}</div><div class="line">f1();</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(m);    <span class="comment">// output：123</span></div><div class="line"><span class="built_in">console</span>.log(n);    <span class="comment">// output：999</span></div></pre></td></tr></table></figure>



<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> n=<span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span>{</div><div class="line">    n=<span class="number">999</span>;</div><div class="line">}</div><div class="line">f1();</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(n);    <span class="comment">// output：999</span></div></pre></td></tr></table></figure>

<h4 id="外部访问函数局部变量">外部访问函数局部变量</h4>
<p>正常情况下JavaScript无法获得函数内部的局部变量的值，可是我们有时需要获取，我们应该怎样做？</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(count);</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">counter();  <span class="comment">//木有反应</span></div></pre></td></tr></table></figure>

<p>以上代码木有反应，因为我们执行了counter函数却没执行counter函数里面的个体函数哟..<br>我们在counter里面调用一下get();这样执行counter函数即执行了get函数。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">        <span class="built_in">console</span>.log(count);</div><div class="line">    }</div><div class="line">    get();</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">counter();  <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>这样我们便访问到了counter的局部变量，哈哈，大功告成！…了吗？<br>我们这样做和一下代码有什么区别？！</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="built_in">console</span>.log(count);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">counter();  <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>这样做行不通，我们另寻他径。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> get;</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="keyword">var</span> foo=counter();</div><div class="line"><span class="built_in">console</span>.log(foo());    <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>我们返回了一个函数名get，当执行了counter函数后返回了counter函数内的get函数的引用并赋值给foo，在外面执行了foo()相当于调用了get()，我们获取到了局部变量count！！！~</p>
<p>以下例子更加灵活</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        <span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">            <span class="keyword">return</span> count;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="keyword">var</span> foo=counter();</div><div class="line">console.log(foo.<span class="keyword">get</span>());    <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>这次我们return了一个对象字面量，在执行counter函数后返回了一个对象字面量并赋给一个foo变量，里面有个名为get的key，其value为一个匿名函数（是否是匿名并没有关系）。我们执行字面量中的get方法，得到了count。</p>
<p>我们希望能在一个函数中访问局部变量，完成更多的事，不仅仅是这一个用途而已。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        <span class="keyword">get</span>:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">            <span class="keyword">return</span> count;</div><div class="line">        },</div><div class="line">        increment:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">            count++;</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="keyword">var</span> foo=counter();</div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：5</span></div><div class="line">foo.increment();</div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：6</span></div></pre></td></tr></table></figure>

<p>以上例子也可以这么写：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">5</span>;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">          <span class="keyword">return</span> count;</div><div class="line">     }</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span></span>{</div><div class="line">         count++;</div><div class="line">     }</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        <span class="keyword">get</span>:<span class="keyword">get</span>,</div><div class="line">        increment:increment</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="keyword">var</span> foo=counter();</div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：5</span></div><div class="line">foo.increment();</div><div class="line">console.log(foo.<span class="keyword">get</span>());    <span class="comment">//output：6</span></div></pre></td></tr></table></figure>

<p>再改进一下，使他更有意义：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">(start)</span></span>{</div><div class="line">    <span class="keyword">var</span> count=start;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">          <span class="keyword">return</span> count;</div><div class="line">     }</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span></span>{</div><div class="line">         count++;</div><div class="line">     }</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        <span class="keyword">get</span>:<span class="keyword">get</span>,</div><div class="line">        increment:increment</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="keyword">var</span> foo=counter(<span class="number">4</span>);</div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：4</span></div><div class="line">foo.increment();</div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>至此，我们已经应用到了闭包。<br>这个例子中的counter函数返回两个闭包，函数get和函数increment。这两个函数都维持着对外部作用域 counter 的引用，因此总可以访问此作用域内定义的变量 count。</p>
<p>以上例子，你还可以这样写</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo = (<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>{</div><div class="line">    <span class="keyword">var</span> count=<span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setCount</span><span class="params">(start)</span></span>{</div><div class="line">        count=start;</div><div class="line">    }</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">getCount</span><span class="params">()</span></span>{</div><div class="line">          <span class="keyword">return</span> count;</div><div class="line">     }</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span></span>{</div><div class="line">         count++;</div><div class="line">     }</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        setCount:setCount,</div><div class="line">        getCount:getCount,</div><div class="line">        increment:increment</div><div class="line">    }</div><div class="line">}());</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line"><span class="built_in">console</span>.log(foo.getCount());   <span class="comment">//output：0</span></div><div class="line">foo.increment();</div><div class="line"><span class="built_in">console</span>.log(foo.getCount());   <span class="comment">//output：1</span></div><div class="line"><span class="comment">//重新设置count</span></div><div class="line">foo.setCount(<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(foo.getCount());   <span class="comment">//output：4</span></div><div class="line">foo.increment();</div><div class="line"><span class="built_in">console</span>.log(foo.getCount());   <span class="comment">//output：5</span></div></pre></td></tr></table></figure>

<p>此处我们直接把调用函数后的结果赋值给foo，注意最后一行的()，成为立即执行函数。<br>之后我们可以直接使用foo.xx的方式来访问相关函数。<br>这也是JavaScript模块化编程的一种写法。</p>
<p>关于立即执行函数，以下两种写法均可，看个人习惯：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//写法一</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ <span class="comment">/* code */</span> } ());</div><div class="line"><span class="comment">//写法二</span></div><div class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>{ <span class="comment">/* code */</span> })();</div></pre></td></tr></table></figure>

<p>(function(){}())是使用了强制运算符执行函数调用运算，(function(){})()是通过函数调用运算符操作函数引用。两者功能上是一致的，只是运算过程不同。</p>
<h2 id="闭包是什么？">闭包是什么？</h2>
<p>闭包是 JavaScript一个非常重要的特性，这意味着当前作用域总是能够访问外部作用域中的变量。 因为函数是JavaScript中唯一拥有自身作用域的结构，因此闭包的创建依赖于函数。</p>
<p><em>闭包在书中是这样被描述的</em>：</p>
<p>闭包是函数和执行它的作用域组成的综合体 — 《JavaScript权威指南》</p>
<p>闭包是一种在函数内访问和操作外部变量的方式;所有的函数都是闭包;函数可以访问它被创建时的上下文环境，成为闭包  — 《JavaScript语言精粹》</p>
<p>内部函数比它的外部函数具有更长的生命周期</p>
<p>更简单的定义 — 闭包就是能够读取其他函数内部变量的函数。</p>
<p>由于在JavaScript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成“定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>
<h3 id="改变私有变量？">改变私有变量？</h3>
<p>我们能否在闭包外面改变私有变量呢？</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">counter</span><span class="params">(start)</span></span>{</div><div class="line">    <span class="keyword">var</span> count=start;</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">get</span><span class="params">()</span></span>{</div><div class="line">          <span class="keyword">return</span> count;</div><div class="line">     }</div><div class="line">     <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span></span>{</div><div class="line">         count++;</div><div class="line">     }</div><div class="line">    <span class="keyword">return</span> {</div><div class="line">        <span class="keyword">get</span>:<span class="keyword">get</span>,</div><div class="line">        increment:increment</div><div class="line">    }</div><div class="line">}</div><div class="line"><span class="keyword">var</span> foo=counter(<span class="number">4</span>);</div><div class="line">foo.hack = <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{</div><div class="line">    count = <span class="number">999</span>;</div><div class="line">};</div><div class="line"></div><div class="line"><span class="comment">//test</span></div><div class="line">console.log(foo.<span class="keyword">get</span>());   <span class="comment">//output：4</span></div></pre></td></tr></table></figure>

<p>这种做法，答案是NO。foo.hack没有定义在counter作用域内，以上代码不会改变定义在counter作用域中的count值。</p>
<h3 id="闭包的优点">闭包的优点</h3>
<ul>
<li>实现了私有变量</li>
<li>保护命名空间</li>
<li>避免污染全局变量</li>
</ul>
<h3 id="闭包的用途">闭包的用途</h3>
<p>闭包可以用在许多地方。它的最大用处有两个，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>
<h2 id="使用闭包的注意点">使用闭包的注意点</h2>
<p>1）由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。<br>2）闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</p>
<h3 id="循环中的闭包">循环中的闭包</h3>
<p>一个常见的错误，出现在循环中使用闭包，假设我们需要在每次循环中访问循环序号</p>
<h4 id="例一:"><em>例一:</em></h4>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    }, <span class="number">1000</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>执行结果为：<br><img src="/img/closure/1.jpg" alt="closure"></p>
<p>上面的代码不会输出数字 0 到 9，而是会输出数字 10 十次。</p>
<p>当 console.log 被调用的时候，匿名函数保持对外部变量 i 的引用，此时 for循环已经结束， i 的值被修改成了 10.</p>
<p>为了得到想要的结果，需要在每次循环中创建变量 i 的拷贝。</p>
<h4 id="避免引用错误">避免引用错误</h4>
<p>为了正确的获得循环序号，最好使用匿名包裹器。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</div><div class="line">    (<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(e);</div><div class="line">        }, <span class="number">1000</span>);</div><div class="line">    })(i);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>执行结果为：<br><img src="/img/closure/2.jpg" alt="closure"></p>
<p>外部的匿名函数会立即执行，并把 i 作为它的参数，此时函数内 e 变量就拥有了 i 的一个拷贝。</p>
<p>当传递给 setTimeout 的匿名函数执行时，它就拥有了对 e 的引用，而这个值是不会被循环改变的。</p>
<p>有另一个方法完成同样的工作；那就是从匿名包装器中返回一个函数。这和上面的代码效果一样。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</div><div class="line">    setTimeout((<span class="function"><span class="keyword">function</span><span class="params">(e)</span> </span>{</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">            <span class="built_in">console</span>.log(e);</div><div class="line">        }</div><div class="line">    })(i), <span class="number">1000</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>执行结果为：<br><img src="/img/closure/3.jpg" alt="closure"></p>
<h4 id="例二:"><em>例二:</em></h4>
<p>糟糕的例子：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span><span class="params">(nodes)</span></span>{</div><div class="line">    <span class="keyword">var</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;nodes.length; i+=<span class="number">1</span>){</div><div class="line">        node[i].onclick=<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        };</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<p>错误来源于在循环中创建函数，其本意是想传递给每个事件处理器一个唯一值(i)。但它未能达到目的，因为事件处理器函数绑定了变量i本身，而不是<br>函数在构造时的变量i的值。</p>
<h4 id="避免引用错误-1">避免引用错误</h4>
<p>例一的解法：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> foo=<span class="function"><span class="keyword">function</span><span class="params">(nodes)</span></span>{</div><div class="line">    <span class="keyword">var</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;nodes.length; i+=<span class="number">1</span>){</div><div class="line">        (<span class="function"><span class="keyword">function</span><span class="params">(n)</span></span>{</div><div class="line">           node[n].onclick=<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{</div><div class="line">                       <span class="built_in">console</span>.log(n);</div><div class="line">           };</div><div class="line">        })(i);</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<p>或者你可以这样做，创建一个辅助函数：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var foo=<span class="function"><span class="keyword">function</span><span class="params">(nodes)</span>{</span></div><div class="line">    var helper=<span class="function"><span class="keyword">function</span><span class="params">(i)</span>{</span></div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">(e)</span>{</span></div><div class="line">           <span class="transposed_variable">console.</span><span class="built_in">log</span>(<span class="built_in">i</span>);</div><div class="line">        };</div><div class="line">    };</div><div class="line">    var <span class="built_in">i</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="built_in">i</span>=<span class="number">0</span>; <span class="built_in">i</span>&lt;<span class="transposed_variable">nodes.</span><span class="built_in">length</span>; <span class="built_in">i</span>+=<span class="number">1</span>)<span class="cell">{</span></div><div class="line">        node[i].onclick=helper(i);</div><div class="line">    }</div><div class="line">};</div></pre></td></tr></table></figure>

<p><em>避免在循环中创建函数</em>，在循环中创建函数，会导致错误，只会带来无谓的计算及引起混淆。<br>在循环之外创建一个辅助函数，让这个辅助函数再返回一个绑定了当前i值的函数，这样就不会导致混淆了。</p>
<hr>
<p>参考文献：<br><a href="http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html" target="_blank" rel="external">[1] 学习Javascript闭包（Closure）</a><br><a href="http://book.douban.com/subject/2994925/" target="_blank" rel="external">[2] JavaScript - The Good Parts</a><br><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/#function.closures" target="_blank" rel="external">[3] JavaScript 秘密花园 - 闭包和引用</a><br><a href="http://www.slideshare.net/lijing00333/javascript-12526041" target="_blank" rel="external">[4] 潜力无限的编程语言JavaScript</a></p>
]]></content>
    
    
      <category term="JavaScript" scheme="http://snailsky.me/tags/JavaScript/"/>
    
      <category term="笔记" scheme="http://snailsky.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="JavaScript" scheme="http://snailsky.me/categories/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[致将与前端技术渡过的宝贵假期]]></title>
    <link href="http://snailsky.me/2014/07/04/%E8%87%B4%E5%B0%86%E4%B8%8E%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%B8%A1%E8%BF%87%E7%9A%84%E5%AE%9D%E8%B4%B5%E5%81%87%E6%9C%9F/"/>
    <id>http://snailsky.me/2014/07/04/致将与前端技术渡过的宝贵假期/</id>
    <published>2014-07-04T03:04:13.000Z</published>
    <updated>2014-07-04T04:54:30.000Z</updated>
    <content type="html"><![CDATA[<p>　　今天心血来潮，在家呆着，怕自己没了激情，自己给自己鼓励一下  (╯▔▽▔)╯</p>
<p>　　博主是个宅女懒人，从小就是，放假从来都是一觉睡到大中午，下午昏昏沉沉的看电视到晚上，接着睡…啊 天…现在觉得过去的自己真是好口怕…</p>
<p>　　恐怕只有自己喜欢的事才肯花时间，并孜孜不倦…</p>
<p>　　比如说喜欢周笔畅这件事,10年了都…并且基本上她出席的所有节目都看过，所有专辑歌曲包括各种场合及节目中翻唱过的歌都会唱(“▔□▔)/(“▔□▔)/(“▔□▔)/再比如说曾经因为很喜欢一首歌里面的伴奏乐器的声音(那个乐器叫做ukulele，是个可爱的长得像小小的吉他的乐器)特意较深入地去了解这个乐器,后来一个哥哥买了，借给我玩，我还辛辛苦苦去网上扒琴谱，把这首歌弹会了…再比如说动漫，海贼王600多集我可一集没拉哦…等等..我貌似说的都是玩的  Σ(￣。￣ﾉ)ﾉ．．．是的，博主是个很爱玩的女汉纸…所以说经过20多年的观察，偶发现自己必须要从事一件自己喜欢的工作以此为乐才能做得好，而不想只是混口饭吃…</p>
<p>　　上课学习编程，老师讲课总是忍不住走神，如果是自己写代码倒是来了精神。自己写代码总是感觉干听着好玩多了…可是在用JAVA写增删改查，用JAVA框架SSH写增删改查，用EJB写增删改查之后，博主终于要吐了…博主开始觉得之前用C语言写ACM的题目时候真有趣…开始想念自己刚刚自学js那会儿写的俄罗斯方块的日子，每天都充满了期待。</p>
<p>　　这里只是自己的感受，不是说哪门语言好哪门语言不好，我相信不管用哪门语言写自己喜欢的东西不会觉得烦会觉得很有趣，而我也相信不管你用哪门语言无休止的狂写增删改查之后，也会想吐的…我从作业里面感到厌烦，我希望能自己开动脑筋做些有趣的东西，比如学JAVA为什么一定要做个系统，增删改查？我也可以自己做一个基于JAVA的小游戏，不过上课嘛随便做做就好，没有那些闲工夫，因为我还有实验室的工作。即使这样，苦中求乐，我还每次做系统都给自己一些挑战，比如说忍受不了丑丑的页面，花时间把它设计的好看些，再自己加个上传图片的功能，不用老师教的方法生成图表，用前端的画图表的库之类的。这样每次做的不光是增删改查，还有其他挑战，每次做了都感觉自己有所提升也就感觉上了这课自己没有浪费时间。</p>
<p>　　而js能实现各种酷炫的效果，让我很迷醉，虽然说js适应各种不同浏览器可能写法都不一样，这点真的有点恶心，不如说是IE恶心比较好？博主也懒得去理IE，劳资更喜欢移动web，因为不用去考虑那些个奇奇怪怪的事情。所以至今IE的兼容方面也没有什么研究(主啊，原谅我吧)，也许在需要的时候才去研究是最好的时机，反正我现在觉得研究那个是浪费时间。做组件的时候我仍然觉得js很好玩，虽然那时候自己写出的代码真的丑。</p>
<p>　　再后来认识了node.js我感觉我的天空一下子放亮了。从那之后开始也陆陆续续地接触到了新鲜的技术，喜欢新技术，很有趣。后来开始写node 和angular，开始使用grunt 感觉这些东西比JAVA那套东西要可爱得多。而且之前从来没有想过以后要从事什么职位，在那之后我想成为一名前端攻城狮…并想为了这个目标努力奋斗。</p>
<p>　　我认为”想”比什么都重要。</p>
<p>　　我的基础并不扎实，不管什么语言，我都不喜欢看书学，感觉很无聊，我就喜欢自己敲，管他对不对，遇到问题了就上网搜一下，这种狂放的学习方法很是符合我的性格O__O” 。但是既然想成为专业的人士肯定基础要牢一些才行，所以这个假期最主要的目标是多做东西，多补基础，我希望边学边在博客上写笔记，那是极好的，这样大概能督促我认真一点。做东西时也注意记录遇到的问题之类的，以前遇到那些问题由于自己没有记笔记的习惯，所以很可惜…没有记下你们…今后我会注意的~如果能做很多自己喜欢的东西出来是极好的。不要浪费时间才好。有时间还可以研究自己以前很好奇但是没用过的东西。希望有这个时间。</p>
<p>　　因为当初的喜欢，现在要付出加倍努力，成为优秀的码农= =　希望自己可以做到~从今天起到假期结束，我希望每天都可以看到充充实实的小！绿！点！You Can Do It ！！！ 加油！</p>
]]></content>
    
    
      <category term="感悟" scheme="http://snailsky.me/tags/%E6%84%9F%E6%82%9F/"/>
    
      <category term="心情" scheme="http://snailsky.me/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="日记" scheme="http://snailsky.me/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="学习生活" scheme="http://snailsky.me/tags/%E5%AD%A6%E4%B9%A0%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活随笔" scheme="http://snailsky.me/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MongoDB的安装及简单使用示例]]></title>
    <link href="http://snailsky.me/2014/07/02/mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://snailsky.me/2014/07/02/mongodb的安装及简单使用示例/</id>
    <published>2014-07-02T06:26:23.000Z</published>
    <updated>2014-07-02T09:34:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是MongoDB">什么是MongoDB</h2>
<p>MongoDB是介于传统数据库和NoSQL数据库之间的一种非关系型数据库。MongoDB使用c++实现，具有高可靠，高可用等优秀特性。<br>Mongo的官方网站地址是：<a href="http://www.mongodb.org/" target="_blank" rel="external">http://www.mongodb.org/</a></p>
<h2 id="MongoDB的安装(windows下)">MongoDB的安装(windows下)</h2>
<p>在官方网站下载了MongoDB了之后，我们就可以进行MongoDB的安装工作了。<br>（以下截图来自在windows server 2003系统上面安装mongo过程中）</p>
<h3 id="1-安装包解压">1.安装包解压</h3>
<p>将mongo安装包解压放在D:/ 改名为mongodb<br><img src="/img/mongoInstall/mongodb1_1.png" alt="mongo的安装"></p>
<h3 id="2-新建存数据的文件夹">2.新建存数据的文件夹</h3>
<p>mongodb下新建文件夹db（随便叫什么都行）用来存mongo的数据<br><img src="/img/mongoInstall/mongodb1_2.png" alt="mongo的安装"></p>
<h3 id="3-运行mongo">3.运行mongo</h3>
<p>现在你已经可以运行mongo咯~<br><em>方法一</em><br>mongodb的bin目录下，shift+鼠标右键&gt;在此处打开命令窗口&gt;输入以下命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --dbpath D:<span class="command">\Mongodb</span><span class="command">\db</span></div></pre></td></tr></table></figure>

<p>这样就可以启动mongo了~</p>
<p><em>方法二</em><br>不过由于作者我是个懒虫，所以为了每次少输入这么个命令，所以就写了个bat文件，O(∩_∩)O哈哈~<br>在mongodb的bin文件夹下新建一个”快速启动.bat”<br><img src="/img/mongoInstall/mongodb1_3.png" alt="mongo的安装"><br>bat文件内容如下<br><img src="/img/mongoInstall/mongodb1_4.png" alt="mongo的安装"><br>保存，并双击”快速启动.bat”将看到以下界面，运行成功~<br><img src="/img/mongoInstall/mongodb1_5.png" alt="mongo的安装"><br>在浏览器输入：<a href="http://localhost:27017/" target="_blank" rel="external">http://localhost:27017/</a><br>可以看到如下提示：<br>You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</p>
<p>如此，MongoDB数据库服务已经成功启动了。</p>
<h2 id="MongoDB简单使用示例">MongoDB简单使用示例</h2>
<p>这里只做最简单的示范，如果有兴趣详细了解可以去看《MongoDB权威指南》这本书哟~</p>
<p>博主偶数据方面都偏爱使用可视化工具,使用起较方便( 其实是因为懒吧Σ(￣。￣ﾉ)ﾉ ),MongoDB我是用的可视化工具是Robomongo…</p>
<h3 id="创建新的database">创建新的database</h3>
<p>在你的connection（左上角可新建connection）上右键&gt;单击CreateDatabase&gt;输入数据库名字&gt;create 这样就创建完成了..<br>像这样：<br><img src="/img/mongoInstall/mongodb1_6.jpg" alt="robomongo的使用"><br>新建的数据库里啥都没有,首先偶们先来给他添一张表吧,右键数据库&gt;Open Shell 在右边框框里可输入命令</p>
<h3 id="创建新表">创建新表</h3>
<p>现在我们创建一张用户表users（包含字段“用户名”、“密码”、“注册时间”）,我们可以这样写</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">db</span><span class="class">.users</span><span class="class">.save</span>(<span class="rules">{</span></div><div class="line">                     <span class="rule"><span class="attribute">username</span>:<span class="value"><span class="string">'admin'</span> ,</span></span></div><div class="line">                     password:<span class="string">'admin'</span>,</div><div class="line">                     register_time : new <span class="function">Date</span>(),</div><div class="line">              })</div></pre></td></tr></table></figure>

<p>现在我们点击红框框里的执行按钮,运行我们刚刚写的代码<br><img src="/img/mongoInstall/mongodb1_7.jpg" alt="robomongo的使用"></p>
<h3 id="查询">查询</h3>
<p>执行成功后我们发现左边collections下多出一张users表,此时我们执行代码来查询一下users表中都有神马<br>以下命令将查询出users中所有数据：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.<span class="keyword">find</span>()</div></pre></td></tr></table></figure>

<p>我们看到刚才插入的数据确实已经在这张users表中了<br><img src="/img/mongoInstall/mongodb1_8.jpg" alt="robomongo的使用"></p>
<h3 id="更新">更新</h3>
<p>我们尝试把刚刚插入的那个用户的密码改成123456</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.users.update(</div><div class="line">    { <span class="string">"username"</span>: <span class="string">"admin"</span> },</div><div class="line">    { <span class="string">"<span class="variable">$set</span>"</span>: { <span class="string">"password"</span>: <span class="string">"123456"</span> } }</div><div class="line">)</div></pre></td></tr></table></figure>

<p>之后查询一下<br><img src="/img/mongoInstall/mongodb1_9.jpg" alt="robomongo的使用"><br>我们发现密码字段已经变成了123456</p>
<h3 id="插入">插入</h3>
<p>我们尝试插入一条新数据</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">db</span><span class="class">.users</span><span class="class">.insert</span>(<span class="rules">{</span></div><div class="line">                     <span class="rule"><span class="attribute">username</span>:<span class="value"><span class="string">'test'</span> ,</span></span></div><div class="line">                     password:<span class="string">'test'</span>,</div><div class="line">                     register_time : new <span class="function">Date</span>()</div><div class="line">              })</div></pre></td></tr></table></figure>

<p>第一次执行成功，我们不小心执行了两次！<br>查询一下，也许我们只希望出现一个叫做test的用户，可是现在数据库中有两个了！<br><img src="/img/mongoInstall/mongodb1_11.jpg" alt="robomongo的使用"></p>
<p>我们想保证文档的”username”键都有不一样的值，创建唯一索引可以确保集合的每一个文档的指定值都有唯一值。</p>
<h3 id="唯一索引">唯一索引</h3>
<p>我们先把重复创建的名叫test的用户删除（只保留了一个test用户），再来执行下面代码创建唯一索引：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.ensureIndex({<span class="string">"username"</span>:<span class="number">1</span>},{<span class="string">"unique"</span>:<span class="literal">true</span>})</div></pre></td></tr></table></figure>

<p>创建成功后，我们再执行上面插入名叫test的用户（此时已经有一个叫test的用户在数据库中）<br><img src="/img/mongoInstall/mongodb1_12.jpg" alt="robomongo的使用"><br>我们发现报错了！test用户插入不进去，因为唯一索引起了作用，用find查询，也并没有改变，我们的唯一索引创建成功~</p>
<h3 id="删除">删除</h3>
<p>我们再尝试将admin这个user删除掉(注意：这里是筛选条件的删除)</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.remove({<span class="string">'username'</span>:<span class="string">'admin'</span>})</div></pre></td></tr></table></figure>

<p>之后查询下<br><img src="/img/mongoInstall/mongodb1_13.jpg" alt="robomongo的使用"><br>我们发现现在admin这个用户已经被删除，只剩下了test用户…</p>
<p><em>注意</em>：remove操作较危险,要小心给其传递条件,如果不加条件,像这样:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.users.<span class="built_in">remove</span>()</div></pre></td></tr></table></figure>

<p>运行该命令后会移除users数据库中所有的数据,需谨慎使用！</p>
<p>目前为止,是基础中的基础,很简单对不对？不过实际应用中会比上述例子要复杂得多。</p>
<h3 id="在Node-js中使用MongoDB">在Node.js中使用MongoDB</h3>
<p>使用mongoose类库，可以让JSON数据直接入库MongoDB。这里并不做过多介绍,有兴趣,或需要用到的朋友可以去了解下。<br>mongoose官网：<a href="http://mongoosejs.com/" target="_blank" rel="external">http://mongoosejs.com/</a></p>
<h4 id="一些问题">一些问题</h4>
<p>以下记录一点,我遇到的问题,其实并不难,但是如果要去找就很花时间。</p>
<p>有一张表，表结构如下(此为缩略版本的mongoose的表结构)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> VersionSchema = <span class="keyword">new</span> Schema({</div><div class="line">	                            username:{ type:<span class="built_in">String</span>, index: <span class="literal">true</span> } ,</div><div class="line">	                            historyVersion:</div><div class="line">		                            [</div><div class="line">			                            {</div><div class="line">			                                version:<span class="built_in">String</span>,</div><div class="line">				                            time : { type: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now },</div><div class="line">				                            describe:<span class="built_in">String</span></div><div class="line">			                            }</div><div class="line">		                            ]</div><div class="line">                            });</div><div class="line"><span class="keyword">var</span> Version = mongodb.mongoose.model(<span class="string">"Version"</span>, VersionSchema);</div></pre></td></tr></table></figure>

<p>historyVersion是一个数组，数组里面存放的是对象类型。</p>
<ul>
<li>关于覆盖一个表中类型为数组中的某个对象的某个字段 = =<br>我要改historyVersion这个数组的某个对象的某个字段的值。<br>做法如下：</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.versions.update(</div><div class="line">    { <span class="string">"username"</span>: <span class="string">"admin"</span>,<span class="string">'historyVersion._id'</span>:ObjectId(<span class="string">"539db613ec7788dc2414cacf"</span>) },</div><div class="line">    { <span class="string">"<span class="variable">$set</span>"</span>: { <span class="string">"historyVersion.$.version"</span>: <span class="string">"2"</span> } }</div><div class="line">)</div></pre></td></tr></table></figure>

<p>historyVersion中对象中的_id是自动生成的，通过这个来辨别更新哪个对象里的字段</p>
<ul>
<li>关于删除一个表中类型为数组中的某个对象</li>
</ul>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.versions.update(</div><div class="line">    {<span class="string">'username'</span><span class="symbol">:<span class="string">'test'</span></span>},</div><div class="line">    {<span class="variable">$pull</span><span class="symbol">:</span>{<span class="string">'historyVersion'</span><span class="symbol">:</span>{<span class="string">'_id'</span><span class="symbol">:ObjectId</span>(<span class="string">"539dcd6b29fb842026d1a5f3"</span>)}}}</div><div class="line">)</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="mongodb" scheme="http://snailsky.me/tags/mongodb/"/>
    
      <category term="mongo" scheme="http://snailsky.me/tags/mongo/"/>
    
      <category term="安装" scheme="http://snailsky.me/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="前端" scheme="http://snailsky.me/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://snailsky.me/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实践" scheme="http://snailsky.me/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="实践笔记" scheme="http://snailsky.me/categories/%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
