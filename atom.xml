<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Running_snail's Blog]]></title>
  <subtitle><![CDATA[Some notes about Web Front-End and others]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://weibo.com/u/1649298213/"/>
  <updated>2014-07-02T09:40:14.326Z</updated>
  <id>http://weibo.com/u/1649298213/</id>
  
  <author>
    <name><![CDATA[running_snail]]></name>
    <email><![CDATA[505324327@qq.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[MongoDB的安装及简单使用示例]]></title>
    <link href="http://weibo.com/u/1649298213/2014/07/02/mongodb%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"/>
    <id>http://weibo.com/u/1649298213/2014/07/02/mongodb的安装及简单使用示例/</id>
    <published>2014-07-02T06:26:23.000Z</published>
    <updated>2014-07-02T09:34:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="什么是MongoDB">什么是MongoDB</h2>
<p>MongoDB是介于传统数据库和NoSQL数据库之间的一种非关系型数据库。MongoDB使用c++实现，具有高可靠，高可用等优秀特性。<br>Mongo的官方网站地址是：<a href="http://www.mongodb.org/" target="_blank">http://www.mongodb.org/</a></p>
<h2 id="MongoDB的安装(windows下)">MongoDB的安装(windows下)</h2>
<p>在官方网站下载了MongoDB了之后，我们就可以进行MongoDB的安装工作了。<br>（以下截图来自在windows server 2003系统上面安装mongo过程中）</p>
<h3 id="1-安装包解压">1.安装包解压</h3>
<p>将mongo安装包解压放在D:/ 改名为mongodb<br><img src="/img/mongoInstall/mongodb1_1.png" alt="mongo的安装"></p>
<h3 id="2-新建存数据的文件夹">2.新建存数据的文件夹</h3>
<p>mongodb下新建文件夹db（随便叫什么都行）用来存mongo的数据<br><img src="/img/mongoInstall/mongodb1_2.png" alt="mongo的安装"></p>
<h3 id="3-运行mongo">3.运行mongo</h3>
<p>现在你已经可以运行mongo咯~<br><em>方法一</em><br>mongodb的bin目录下，shift+鼠标右键&gt;在此处打开命令窗口&gt;输入以下命令</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mongod --dbpath D:<span class="command">\Mongodb</span><span class="command">\db</span>
</pre></td></tr></table></figure>

<p>这样就可以启动mongo了~</p>
<p><em>方法二</em><br>不过由于作者我是个懒虫，所以为了每次少输入这么个命令，所以就写了个bat文件，O(∩_∩)O哈哈~<br>在mongodb的bin文件夹下新建一个”快速启动.bat”<br><img src="/img/mongoInstall/mongodb1_3.png" alt="mongo的安装"><br>bat文件内容如下<br><img src="/img/mongoInstall/mongodb1_4.png" alt="mongo的安装"><br>保存，并双击”快速启动.bat”将看到以下界面，运行成功~<br><img src="/img/mongoInstall/mongodb1_5.png" alt="mongo的安装"><br>在浏览器输入：<a href="http://localhost:27017/" target="_blank">http://localhost:27017/</a><br>可以看到如下提示：<br>You are trying to access MongoDB on the native driver port. For http diagnostic access, add 1000 to the port number</p>
<p>如此，MongoDB数据库服务已经成功启动了。</p>
<h2 id="MongoDB简单使用示例">MongoDB简单使用示例</h2>
<p>这里只做最简单的示范，如果有兴趣详细了解可以去看《MongoDB权威指南》这本书哟~</p>
<p>博主偶数据方面都偏爱使用可视化工具,使用起较方便( 其实是因为懒吧Σ(￣。￣ﾉ)ﾉ ),MongoDB我是用的可视化工具是Robomongo…</p>
<h3 id="创建新的database">创建新的database</h3>
<p>在你的connection（左上角可新建connection）上右键&gt;单击CreateDatabase&gt;输入数据库名字&gt;create 这样就创建完成了..<br>像这样：<br><img src="/img/mongoInstall/mongodb1_6.jpg" alt="robomongo的使用"><br>新建的数据库里啥都没有,首先偶们先来给他添一张表吧,右键数据库&gt;Open Shell 在右边框框里可输入命令</p>
<h3 id="创建新表">创建新表</h3>
<p>现在我们创建一张用户表users（包含字段“用户名”、“密码”、“注册时间”）,我们可以这样写</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">db</span><span class="class">.users</span><span class="class">.save</span>(<span class="rules">{
                     <span class="rule"><span class="attribute">username</span>:<span class="value"><span class="string">'admin'</span> ,
                     password:<span class="string">'admin'</span>,
                     register_time : new <span class="function">Date()</span>,
              </span></span></span>})
</pre></td></tr></table></figure>

<p>现在我们点击红框框里的执行按钮,运行我们刚刚写的代码<br><img src="/img/mongoInstall/mongodb1_7.jpg" alt="robomongo的使用"></p>
<h3 id="查询">查询</h3>
<p>执行成功后我们发现左边collections下多出一张users表,此时我们执行代码来查询一下users表中都有神马<br>以下命令将查询出users中所有数据：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>db<span class="preprocessor">.users</span><span class="preprocessor">.find</span>()
</pre></td></tr></table></figure>

<p>我们看到刚才插入的数据确实已经在这张users表中了<br><img src="/img/mongoInstall/mongodb1_8.jpg" alt="robomongo的使用"></p>
<h3 id="更新">更新</h3>
<p>我们尝试把刚刚插入的那个用户的密码改成123456</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>db<span class="preprocessor">.users</span><span class="preprocessor">.update</span>(
    { <span class="string">"username"</span>: <span class="string">"admin"</span> },
    { <span class="string">"$set"</span>: { <span class="string">"password"</span>: <span class="string">"123456"</span> } }
)
</pre></td></tr></table></figure>

<p>之后查询一下<br><img src="/img/mongoInstall/mongodb1_9.jpg" alt="robomongo的使用"><br>我们发现密码字段已经变成了123456</p>
<h3 id="插入">插入</h3>
<p>我们尝试插入一条新数据</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">db</span><span class="class">.users</span><span class="class">.insert</span>(<span class="rules">{
                     <span class="rule"><span class="attribute">username</span>:<span class="value"><span class="string">'test'</span> ,
                     password:<span class="string">'test'</span>,
                     register_time : new <span class="function">Date()</span>
              </span></span></span>})
</pre></td></tr></table></figure>

<p>第一次执行成功，我们不小心执行了两次！<br>查询一下，也许我们只希望出现一个叫做test的用户，可是现在数据库中有两个了！<br><img src="/img/mongoInstall/mongodb1_11.jpg" alt="robomongo的使用"></p>
<p>我们想保证文档的”username”键都有不一样的值，创建唯一索引可以确保集合的每一个文档的指定值都有唯一值。</p>
<h3 id="唯一索引">唯一索引</h3>
<p>我们先把重复创建的名叫test的用户删除（只保留了一个test用户），再来执行下面代码创建唯一索引：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>db<span class="preprocessor">.users</span><span class="preprocessor">.ensureIndex</span>({<span class="string">"username"</span>:<span class="number">1</span>},{<span class="string">"unique"</span>:true})
</pre></td></tr></table></figure>

<p>创建成功后，我们再执行上面插入名叫test的用户（此时已经有一个叫test的用户在数据库中）<br><img src="/img/mongoInstall/mongodb1_12.jpg" alt="robomongo的使用"><br>我们发现报错了！test用户插入不进去，因为唯一索引起了作用，用find查询，也并没有改变，我们的唯一索引创建成功~</p>
<h3 id="删除">删除</h3>
<p>我们再尝试将admin这个user删除掉(注意：这里是筛选条件的删除)</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>db.users.remove({<span class="string">'username'</span>:<span class="string">'admin'</span>})
</pre></td></tr></table></figure>

<p>之后查询下<br><img src="/img/mongoInstall/mongodb1_13.jpg" alt="robomongo的使用"><br>我们发现现在admin这个用户已经被删除，只剩下了test用户…</p>
<p><em>注意</em>：remove操作较危险,要小心给其传递条件,如果不加条件,像这样:</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>db<span class="preprocessor">.users</span><span class="preprocessor">.remove</span>()
</pre></td></tr></table></figure>

<p>运行该命令后会移除users数据库中所有的数据,需谨慎使用！</p>
<p>目前为止,是基础中的基础,很简单对不对？不过实际应用中会比上述例子要复杂得多。</p>
<h3 id="在Node-js中使用MongoDB">在Node.js中使用MongoDB</h3>
<p>使用mongoose类库，可以让JSON数据直接入库MongoDB。这里并不做过多介绍,有兴趣,或需要用到的朋友可以去了解下。<br>mongoose官网：<a href="http://mongoosejs.com/" target="_blank">http://mongoosejs.com/</a></p>
<h4 id="一些问题">一些问题</h4>
<p>以下记录一点,我遇到的问题,其实并不难,但是如果要去找就很花时间。</p>
<p>有一张表，表结构如下(此为缩略版本的mongoose的表结构)：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">var</span> VersionSchema = <span class="keyword">new</span> Schema({
	                            username:{ type:<span class="built_in">String</span>, index: <span class="literal">true</span> } ,
	                            historyVersion:
		                            [
			                            {
			                                version:<span class="built_in">String</span>,
				                            time : { type: <span class="built_in">Date</span>, <span class="keyword">default</span>: <span class="built_in">Date</span>.now },
				                            describe:<span class="built_in">String</span>
			                            }
		                            ]
                            });
<span class="keyword">var</span> Version = mongodb.mongoose.model(<span class="string">"Version"</span>, VersionSchema);
</pre></td></tr></table></figure>

<p>historyVersion是一个数组，数组里面存放的是对象类型。</p>
<ul>
<li>关于覆盖一个表中类型为数组中的某个对象的某个字段 = =<br>我要改historyVersion这个数组的某个对象的某个字段的值。<br>做法如下：<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>db.versions.update(
    { <span class="string">"username"</span>: <span class="string">"admin"</span>,<span class="string">'historyVersion._id'</span>:ObjectId(<span class="string">"539db613ec7788dc2414cacf"</span>) },
    { <span class="string">"<span class="variable">$set</span>"</span>: { <span class="string">"historyVersion.$.version"</span>: <span class="string">"2"</span> } }
)
</pre></td></tr></table></figure>

</li>
</ul>
<p>historyVersion中对象中的_id是自动生成的，通过这个来辨别更新哪个对象里的字段</p>
<ul>
<li>关于删除一个表中类型为数组中的某个对象<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>db.versions.update(
    {<span class="string">'username'</span><span class="symbol">:<span class="string">'test'</span></span>},
    {<span class="variable">$pull</span><span class="symbol">:</span>{<span class="string">'historyVersion'</span><span class="symbol">:</span>{<span class="string">'_id'</span><span class="symbol">:ObjectId</span>(<span class="string">"539dcd6b29fb842026d1a5f3"</span>)}}}
)
</pre></td></tr></table></figure>













</li>
</ul>
]]></content>
    
    
      <category term="mongodb" scheme="http://weibo.com/u/1649298213/tags/mongodb/"/>
    
      <category term="mongo" scheme="http://weibo.com/u/1649298213/tags/mongo/"/>
    
      <category term="安装" scheme="http://weibo.com/u/1649298213/tags/%E5%AE%89%E8%A3%85/"/>
    
      <category term="前端" scheme="http://weibo.com/u/1649298213/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://weibo.com/u/1649298213/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="实践" scheme="http://weibo.com/u/1649298213/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="实践笔记" scheme="http://weibo.com/u/1649298213/categories/%E5%AE%9E%E8%B7%B5%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 编程实践 - UI层的松耦合 (二)]]></title>
    <link href="http://weibo.com/u/1649298213/2014/06/07/javascript-%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-ui%E5%B1%82%E7%9A%84%E6%9D%BE%E8%80%A6%E5%90%88%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://weibo.com/u/1649298213/2014/06/07/javascript-编程实践-ui层的松耦合（二）/</id>
    <published>2014-06-07T07:46:17.000Z</published>
    <updated>2014-06-09T05:23:05.000Z</updated>
    <content type="html"><![CDATA[<p><em>这是一篇读书笔记，对书中的描述进行精简，归纳，总结，<br>有时也会自己写一些例子，感想和扩展 O(∩_∩)O~</em></p>
<hr>
<h2 id="5-将HTML从JavaScript中抽离">5.将HTML从JavaScript中抽离</h2>
<p>正如我们需要将JavaScript从HTML中抽离一样，最好也将HTML从JavaScript中抽离。避免HTML的问题被埋在JavaScript代码中，以节省调试时间。</p>
<h3 id="常见问题">常见问题</h3>
<p>在JavaScript中使用HTML的情形往往是给innerHTML属性赋值时，比如：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// 不好的写法</span>
var <span class="keyword">div</span> = document.getElementById(<span class="string">"my-div"</span>);
<span class="keyword">div</span>.innerHTML = <span class="string">"&lt;h3&gt;Error&lt;/h3&gt;&lt;p&gt;Invalid e-mail address.&lt;/p&gt;"</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：将HTML嵌入JavaScript代码中是非常不好的实践。<br><strong>缺点</strong>：增加了跟踪文本和结构性问题的复杂度。追踪bug变得困难。<br>如果你希望修改文本或标签，你只希望去一个地方：可以控制你HTML代码的地方。如果你的标签出现在一处便可以很方便地更新它们。<br>相比于修改JavaScript代码，修改标签通常不会引发太多错误。当HTML和JavaScript混淆在一起时，问题将变得复杂。JavaScript字符串需要对引号做适当转义，这样则会导致它和模板语言的原生语法略有差异。</p>
<h3 id="解决方法">解决方法</h3>
<p>因为多数Web应用本质上都是动态的，需要通过JavaScript向页面插入或修改标签。有很多方法可以以低耦合方式完成这项工作。</p>
<h4 id="方式一：从服务器加载">方式一：从服务器加载</h4>
<p>将模板放置于远程服务器，使用XMLHttpRequest对象来获取外部标签。<br>例：点击一个链接，希望弹出一个新对话框，代码可能如下：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">loadDialog</span><span class="params">(name, oncomplete)</span>{</span>
    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();
    xhr.open(<span class="string">"get"</span>, <span class="string">"/js/dialog"</span> + name, <span class="literal">true</span>);

    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span><span class="params">()</span> {</span>
        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> && xhr.status == <span class="number">200</span>) {
            <span class="keyword">var</span> div = document.getElementById(<span class="string">"dlg-holder"</span>);
            div.innerHTML = xhr.responseText;
            oncomplete();
        }<span class="keyword">else</span>{
            <span class="comment">// 处理错误</span>
        }
    }；
    xhr.send(<span class="literal">null</span>);
}
</pre></td></tr></table></figure>

<p><strong>评价</strong>：低耦合，对单页应用带来更多便捷。<br><strong>优点</strong>：这里没有将HTML字符串嵌入在JavaScript里，而是向服务器发起请求获取字符串，这样可以让HTML代码以最合适的方式注入到页面中。<br><strong>缺点</strong>：这种方法（从服务器获取模板）很容易造成XSS漏洞，需要服务器对模板文件做适当转义处理，比如&lt;和&gt;以及双引号等，当然前端也应当给出与之匹配的渲染规则，总之这种方法需要一揽子前后端的转码和解码策略来尽可能地封堵XSS漏洞。</p>
<p><strong>JavaScript类库</strong>将这个操作做了封装，使得直接给DOM元素挂在内容变得非常方便。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// YUI</span>
<span class="function"><span class="keyword">function</span> <span class="title">loadDialog</span><span class="params">(name, oncomplete)</span>{</span>
    <span class="transposed_variable">Y.</span>one(<span class="string">"#dlg-holder"</span>).<span class="built_in">load</span>(<span class="string">"/js/dialog/"</span> + name, oncomplete);
}
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">// jQuery</span>
<span class="function"><span class="keyword">function</span> <span class="title">loadDialog</span><span class="params">(name, oncomplete)</span>{</span>
    $(<span class="string">"#dlg-holder"</span>).load(<span class="string">"/js/dialog/"</span> + name, oncomplete);
}
</pre></td></tr></table></figure>

<p><strong>适用时机</strong>：当你需要注入大段HTML标签到页面中时，使用远程调用的方式来加载标签是非常有帮助的。出于性能的原因，将大量没用的标签存放于内存或DOM中是很糟糕的做法。对于少量的标签段可以考虑采用客户端模板。</p>
<h4 id="方式二：简单客户端模板">方式二：简单客户端模板</h4>
<p>客户端模板是一些带“插槽”的标签片段，这些“插槽”会被JavaScript程序替换为数据以保证模板的完整可用。<br><em>比如：一段用来添加数据项的模板看起来就像下面这样。</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"%s"</span>&gt;</span>%s<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</pre></td></tr></table></figure>

<p>这段模板中包含%s占位符，这个位置的文本会被程序替换掉（这个格式和C语言中的sprintf（）一模一样）。JavaScript程序会将这些占位符替换为真实数据，然后将结果注入DOM。</p>
<p>那么<em>模板放在哪儿呢？</em><br>通常我们将模板定义在其他标签之间，直接存放于HTML页面里，这样可以被JavaScript读取，用以下两种方法之一可做到。</p>
<p><strong>模板位置一</strong>：在HTML注释中包含模板文本。</p>
<p>注释是和元素及文本一样的DOM节点，因此可以通过JavaScript将其提取出来。<br><em>完整实例如下</em>（书上的例子有些小问题，所以整理试了下，以下程序亲测可用）：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 简单客户端模板（模板位置一） - HTML代码 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"mylist"</span>&gt;</span><span class="comment">&lt;!--&lt;li&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/li&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/1"</span>&gt;</span>First item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/2"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/3"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">//    简单客户端模板（模板位置一） - JavaScript代码</span>
<span class="comment">//    用参数替换占位符</span>
<span class="function"><span class="keyword">function</span> <span class="title">sprintf</span><span class="params">(text)</span>{</span>
    <span class="keyword">var</span> i=<span class="number">1</span>,args=<span class="built_in">arguments</span>;
    <span class="keyword">return</span> text.replace(<span class="regexp">/%s/g</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="keyword">return</span> (i &lt; args.length) ? args[i++] : <span class="string">""</span>;
    });
}
<span class="comment">//    将填充模板之后的结果添加到适当位置</span>
<span class="function"><span class="keyword">function</span> <span class="title">addItem</span><span class="params">(url, text)</span>{</span>
    <span class="keyword">var</span> mylist = document.getElementById(<span class="string">"mylist"</span>),
        templateText = mylist.firstChild.nodeValue,
        <span class="comment">//templateText:  &lt;li&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/li&gt;</span>
        result = sprintf(templateText,  url,  text);
    mylist.insertAdjacentHTML(<span class="string">"beforeend"</span>, result);
}
<span class="comment">//    用法</span>
addItem(<span class="string">"/item/4"</span>, <span class="string">"Fourth item"</span>);
</pre></td></tr></table></figure>

<p><em>笔记</em>：</p>
<ul>
<li><p>HTML代码中的注释部分一定要和上一级的开始标签挨着（此处就是注释和&lt;ul&gt;挨着），如果是像这样写</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 错误的写法 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"mylist"</span>&gt;</span>
    <span class="comment">&lt;!--&lt;li&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/li&gt;--&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/1"</span>&gt;</span>First item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/2"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/3"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var mylist = document<span class="preprocessor">.getElementById</span>(<span class="string">"mylist"</span>),
    templateText = mylist<span class="preprocessor">.firstChild</span><span class="preprocessor">.nodeValue</span><span class="comment">;</span>
</pre></td></tr></table></figure><br>将获取不到<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"%s"</span>&gt;</span>%s<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>insertAdjacentHTML方法：在指定的地方插入html标签语句<br>原型：insertAdajcentHTML(swhere,stext)<br>参数：swhere: 指定插入html标签语句的地方，有四种值可用：</p>
</li>
</ul>
<ol>
<li>beforeBegin: 插入到标签开始前</li>
<li>afterBegin:插入到标签开始标记之后</li>
<li>beforeEnd:插入到标签结束标记前</li>
<li>afterEnd:插入到标签结束标记后</li>
</ol>
<p><strong>模板位置二</strong>：放在一个带有自定义type属性的&lt;script&gt;元素。</p>
<p>浏览器会默认将&lt;script&gt;元素中的内容识别为JavaScript代码，但你可以通过给type赋值为浏览器不识别的类型，来告诉浏览器这不是一段JavaScript脚本。</p>
<p><em>完整实例如下</em>：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 简单客户端模板（模板位置二） - HTML代码 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"mylist"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/1"</span>&gt;</span>First item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/2"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/3"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>//    简单客户端模板（模板位置二） - 模板写在script元素中
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-my-template"</span> <span class="attribute">id</span>=<span class="value">"list-item"</span>&gt;</span><span class="javascript">
    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"%s"</span>&gt;</span>%s<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="comment">//    简单客户端模板（模板位置二） - JavaScript代码</span>
<span class="comment">//    用参数替换占位符</span>
<span class="function"><span class="keyword">function</span> <span class="title">sprintf</span><span class="params">(text)</span>{</span>
    <span class="keyword">var</span> i=<span class="number">1</span>,args=<span class="built_in">arguments</span>;
    <span class="keyword">return</span> text.replace(<span class="regexp">/%s/g</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="keyword">return</span> (i &lt; args.length) ? args[i++] : <span class="string">""</span>;
    });
}
<span class="comment">//    将填充模板之后的结果添加到适当位置</span>
<span class="function"><span class="keyword">function</span> <span class="title">addItem</span><span class="params">(url, text)</span>{</span>
    <span class="keyword">var</span> mylist = document.getElementById(<span class="string">"mylist"</span>),
        script = document.getElementById(<span class="string">"list-item"</span>),
        templateText = script.text,
        result = sprintf(templateText,  url,  text),
        div = document.createElement(<span class="string">"div"</span>);

    div.innerHTML = result.replace(<span class="regexp">/^\s*/</span>, <span class="string">""</span>);
    mylist.appendChild(div.firstChild);
}
<span class="comment">//    用法</span>
addItem(<span class="string">"/item/4"</span>, <span class="string">"Fourth item"</span>);
</pre></td></tr></table></figure>

<p><em>笔记</em>：</p>
<ul>
<li>函数中去掉了模板文本中的前导空格<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>result.<span class="operator"><span class="keyword">replace</span>(/^\s*/, <span class="string">""</span>);</span>
</pre></td></tr></table></figure><br>之所以会出现这个多余的前导空格，是因为模板文本总是在 &lt;script&gt;起始标签的下一行。如果将模板文本原样注入，则会在 &lt;div&gt;里创建一个文本结点，这个文本节点的内容是一个空格，而这个文本节点最终会代替 &lt;li&gt;被添加进列表之中。</li>
</ul>
<h4 id="方式三：复杂客户端模板">方式三：复杂客户端模板</h4>
<p>前两种方式模板格式都非常简单，无太多转义，如果想用一些更健壮的模板，可以考虑诸如<a href="http://handlebarsjs.com/" target="_blank">Handlebars</a>所提供的解决方案。</p>
<p>Handlebars是专为浏览器端JavaScript设计的完整的客户端模板系统。<br>在Handlebars的模板中，占位符使用双花括号来表示。</p>
<p><em>上一节中的模板Handlebars版本完整实例如下</em>：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 复杂客户端模板（Handlebars） - HTML代码 --&gt;</span>
<span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"mylist"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/1"</span>&gt;</span>First item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/2"</span>&gt;</span>Second item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/item/3"</span>&gt;</span>Third item<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>//    复杂客户端模板（Handlebars） - 模板写在script元素中
<span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-handlebars-template"</span> <span class="attribute">id</span>=<span class="value">"list-item"</span>&gt;</span><span class="javascript">
    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">""</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre>//    复杂客户端模板（Handlebars） - JavaScript代码
function addItem(url, text){
    var mylist = document<span class="preprocessor">.getElementById</span>(<span class="string">"mylist"</span>),
        script = document<span class="preprocessor">.getElementById</span>(<span class="string">"list-item"</span>),
        templateText = script<span class="preprocessor">.text</span>,
        template = Handlebars<span class="preprocessor">.compile</span>(templateText),
        div = document<span class="preprocessor">.createElement</span>(<span class="string">"div"</span>),
        result<span class="comment">;</span>

        <span class="comment">/* 变量template包含了一个函数，当执行这个函数时则返回一个
        格式化好的字符串，你需要做的仅仅是传入一个包含属性的对象，
        参数会自动做HTML转义。*/</span>
        result = template({
            text:text,
            url:url
        })<span class="comment">;</span>
    div<span class="preprocessor">.innerHTML</span> = result<span class="comment">;</span>
    mylist<span class="preprocessor">.appendChild</span>(div<span class="preprocessor">.firstElementChild</span>)<span class="comment">;</span>
}
//    用法
addItem(<span class="string">"/item/4"</span>, <span class="string">"Fourth item"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><em>笔记</em>：</p>
<ul>
<li><p>要使用Handlebars首先要将Handlebars类库引入页面。这个类库会创建一个名为Handlebars的全局变量，用来将模板文本编译为一个函数。<br>我是用的 bower 来安装 Handlebars 的：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>bower <span class="keyword">install</span> handlebars -g
</pre></td></tr></table></figure><br>(注：Bower 是 twitter 推出的一款包管理工具，基于nodejs的模块化思想，把功能分散到各个模块中，让模块和模块之间存在联系，通过 Bower 来管理模块间的这种联系。)<br>安装后记得引用进页面来：<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"/javascripts/handlebars.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>
</li>
<li><p>在Handlebars模板中，占位符都记为一个名称，以便可以在JavaScript中设计其映射。Handlebars 建议将模板嵌入 HTML 页面中，并使用 type 属性为 “text/x-handlebars-template”的&lt;script&gt;标签来表示（如上例所示）</p>
</li>
<li><p>变量template包含了一个函数，当执行这个函数时则返回一个格式化好的字符串，你需要做的仅仅是传入一个包含属性的对象。参数会自动做HTML转义，转义操作也是格式化的一部分。转义是为了增强模板的安全性，并确保简单的文本值不会破坏你的标签结构。比如，字符”&amp;”会自动转义为 “&amp;amp”;</p>
</li>
<li><p>关于上面例子的写法，最初我尝试用之前的写法：<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>mylist<span class="preprocessor">.appendChild</span>(div<span class="preprocessor">.firstChild</span>)<span class="comment">;</span>
</pre></td></tr></table></figure><br>可是无效，我又打印出div看，div 的 firstChild 确实是li，可是打印 div.firstChild 出来是“#text”它的值貌似是个回车。我发现打印div下有个 firstElementChild 和 firstChild 里面的东西一样的所以就用 firstElementChild 试了，还真可以，不过还是不懂为什么firstChild不行了，大家如果知道原因，求指点。</p>
</li>
</ul>
]]></content>
    
    
      <category term="javascript" scheme="http://weibo.com/u/1649298213/tags/javascript/"/>
    
      <category term="前端" scheme="http://weibo.com/u/1649298213/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://weibo.com/u/1649298213/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="书" scheme="http://weibo.com/u/1649298213/tags/%E4%B9%A6/"/>
    
      <category term="实践" scheme="http://weibo.com/u/1649298213/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="读书笔记" scheme="http://weibo.com/u/1649298213/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript 编程实践 - UI层的松耦合 (一)]]></title>
    <link href="http://weibo.com/u/1649298213/2014/05/31/javascript-%E7%BC%96%E7%A8%8B%E5%AE%9E%E8%B7%B5-UI%E5%B1%82%E7%9A%84%E6%9D%BE%E8%80%A6%E5%90%88%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://weibo.com/u/1649298213/2014/05/31/javascript-编程实践-UI层的松耦合（一）/</id>
    <published>2014-05-31T03:33:37.000Z</published>
    <updated>2014-06-09T05:26:31.000Z</updated>
    <content type="html"><![CDATA[<p><em>这是一篇读书笔记，对书中的描述进行精简，归纳，总结，<br>有时也会自己写一些例子，感想和扩展 O(∩_∩)O~</em></p>
<hr>
<h1 id="UI层的松耦合">UI层的松耦合</h1>
<p>WEB开发中 UI由三个彼此隔离又相互作用的层定义（HTML,CSS,JavaScript）。</p>
<p>在实际场景中，css和JavaScript是同等重要的，两者更像是兄弟关系并非依赖关系（javascript依赖css）。<br>一个页面很可能只有HTML和CSS而没有JavaScript,<br>或………………只有HTML和JavaScript而没有CSS。</p>
<p>在所有Web UI中，JavaScript的正确运行不应依赖CSS—在缺少CSS情况下也要能够正确运行，尽管两者之间可能有互动。</p>
<h2 id="1-_什么是松耦合">1. 什么是松耦合</h2>
<h3 id="1-1_什么是耦合：">1.1 什么是耦合：</h3>
<p>如果两个组件耦合太紧，则说明一个组件和另一个组件直接相关，<br>如果修改一个组件的逻辑，那么另外一个组件的逻辑也需修改。</p>
<p>耦合的例子：有一个贯穿整个站点的css类叫做error，被嵌入到HTML中。如果有一天你要改error这个名字为warning，不仅要修改CSS还要修改用到这个类名的HTML，HTML和CSS紧耦合在一起。</p>
<h3 id="1-2_什么时候才能称作松耦合：">1.2 什么时候才能称作松耦合：</h3>
<p>当你能够做到修改一个组件而不需要更改其他组件时，你就做到了松耦合。</p>
<p>松耦合是易于调试的，这对于代码的可维护性来说至关重要。修改某部分代码是不会破坏其他人的代码，那便是极好的 0.0’</p>
<p>在一起工作的组件无法达到“无耦合”，我们的目标是确保对一个组件的修改不会经常性地影响其他部分。</p>
<h2 id="2-_将JavaScript从CSS中抽离">2. 将JavaScript从CSS中抽离</h2>
<p>IE8和更早版本的浏览器中有一个特性让人爱少恨多，即CSS表达式（CSS expression）。<br>CSS表达式允许你将JavaScript直接插入到CSS中，可以在CSS代码中直接执行运算或其他操作。</p>
<p><em>设置元素宽度以匹配浏览器宽度</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">/* 不好的写法 */</span>
<span class="class">.box</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="function">expression(document.body.offsetWidth + <span class="string">"px"</span>)</span></span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure>

<p>CSS表达式包裹在一个特殊的expression()函数中，可以给它传入任意JavaScript代码。<br>浏览器会以高频率重复计算CSS表达式，严重影响了性能。且难以维护。<br>IE9不再支持CSS表达式，老版本IE依然可以运行CSS表达式。<br>有人会用CSS表达式来让低版本浏览器里也达到和高级浏览器一致的表现，但尽量避免使用，以避免浪费不必要的时间精力。</p>
<p><strong>总结</strong>：避免使用CSS表达式</p>
<h2 id="3-_将CSS从JavaScript中抽离">3. 将CSS从JavaScript中抽离</h2>
<p>CSS和JavaScript互相协作的很不错，所以我们经常将样式数据和JavaScript混写在一起。</p>
<h3 id="JavaScript改CSS方式：">JavaScript改CSS方式：</h3>
<h4 id="方式一（不好）：style属性">方式一（不好）：style属性</h4>
<p>直接修改DOM元素的style属性。</p>
<p>style属性是一个对象，包含了可以读取和修改的CSS属性。<br><em>如：修改元素文本颜色</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 不好的写法 */</span>
element<span class="preprocessor">.style</span><span class="preprocessor">.color</span> = <span class="string">"red"</span><span class="comment">;</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：这种写法经常看到，但是这种写法是有问题的。<br><strong>缺点</strong>：当出现样式问题，通常首先去查找CSS，而非JavaScript，浪费时间。<br><strong>例外</strong>：有一种使用style属性的情形是可以接受的:<br>当你需要给页面中的元素作定位，使其相对于另外一个元素或整个页面重新定位。这种计算在CSS中无法完成，<br>此时可以使用style.top、style.left、style.bottom、style.right 来对元素作正确定位。<br>在CSS中定义这个元素的默认属性，而在JavaScript中修改这些默认值。</p>
<h4 id="方式二（不好）：cssText属性">方式二（不好）：cssText属性</h4>
<p>给cssText属性赋值整个CSS字符串</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 不好的写法 */</span>
element<span class="preprocessor">.style</span><span class="preprocessor">.cssText</span> = <span class="string">"color: red; left: 10px; top: 100px; visibility: hidden"</span><span class="comment">;</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：这种写法是一次性设置多个CSS属性的一种快捷方法，同样有问题。<br><strong>缺点</strong>：比如设置单个属性时：将样式信息写入JavaScript带来了可维护性问题。</p>
<h4 id="方式三（最佳）：操作className">方式三（最佳）：操作className</h4>
<p>操作CSS的className</p>
<p><em>例：在页面中显示一个对话框，css中的样式定义像下面这样</em></p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class">.reveal</span><span class="rules">{
    <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">10</span>px</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">100</span>px</span></span>;
    <span class="rule"><span class="attribute">visibility</span>:<span class="value"> visible</span></span>;
<span class="rule">}</span></span>
</pre></td></tr></table></figure><br><em>在JavaScript中像这样将样式添加至元素。</em><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 好的写法 - 原生方法 */</span>
element<span class="preprocessor">.className</span> += <span class="string">" reveal"</span><span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 好的写法 - HTML5 */</span>
element<span class="preprocessor">.classList</span><span class="preprocessor">.add</span>(<span class="string">"reveal"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 好的写法 - YUI */</span>
<span class="built_in">Y</span><span class="preprocessor">.one</span>(element)<span class="preprocessor">.addClass</span>(<span class="string">"reveal"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 好的写法 - jQuery */</span>
$(element).addClass(<span class="string">"reveal"</span>);
</pre></td></tr></table></figure>

<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">/* 好的写法 - Dojo */</span>
dojo<span class="preprocessor">.addClass</span>(element, <span class="string">"reveal"</span>)<span class="comment">;</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：JavaScript可以随意添加删除元素的className，而className定义的样式则在CSS代码中。<br>CSS样式随时可以修改，而不必更新JavaScript。<br><strong>优点</strong>：JavaScript未直接操作样式，保持了和CSS的松耦合。</p>
<h2 id="4-将JavaScript从HTML中抽离">4.将JavaScript从HTML中抽离</h2>
<p>很多人学习JavaScript之初所做的第一件事是，将脚本嵌入HTML中来运行。</p>
<h3 id="绑定事件方式">绑定事件方式</h3>
<h4 id="方式一_（不好）：使用on属性">方式一 （不好）：使用on属性</h4>
<p>使用on属性（ 比如onclick ）绑定一个事件处理程序</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 不好的写法 --&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">onclick</span>=<span class="value">"doSomething()"</span> <span class="attribute">id</span>=<span class="value">"action-btn"</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：此写法2000年时非常流行，尽管这种代码多数场景下是正常工作的，但却是两个UI层（HTML和JavaScript）的深耦合，这种写法有一些问题<br><strong>缺点</strong>：</p>
<ol>
<li>点击事件发生时，doSomething()函数必须存在，否则会报JavaScript错误，页面或弹出错误信息或点击事件不会有任何响应。</li>
<li>如果修改了doSomething()的函数名或如果此时点击按钮调用了其他函数，需要同时修改JavaScript和HTML代码。给维护带来了困难，这是典型的紧耦合的代码。</li>
</ol>
<h4 id="方式二（最佳）：_通过&lt;script&gt;标签来引用">方式二（最佳）： 通过&lt;script&gt;标签来引用</h4>
<p>绝大多数（并非所有的）JavaScript代码包含在外部文件中，并在页面中通过&lt;script&gt;标签来引用。<br>对于支持2级DOM模型的浏览器来说，用下代码可完成上面例子中的功能：</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span>{</span>
    <span class="comment">//代码</span>
}
<span class="keyword">var</span> btn = document.getElementById(<span class="string">"action-btn"</span>);
btn.addEventListener(<span class="string">"click"</span>, doSomething, <span class="literal">false</span>);
</pre></td></tr></table></figure><br><strong>关于addEventListener()函数</strong>：<br>IE8及其更早的版本不支持addEventListener()函数，因此需要一个标准的函数将这些差异性做封装。<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">/*
 * 这个函数可以做到在各种浏览器中给一个元素添加事件处理程序
 * 甚至可以降级到支持给0级DOM模型对象的on属性赋值处理程序
 * （只有在非常古老的浏览器），比如Netscape4中，才会执行这一步，
 * 因此这段代码可以在所有情形下都正常工作）
 */</span>
<span class="keyword">function</span> addListener(target, <span class="class"><span class="keyword">type</span>, <span class="title">handler</span>){</span>
    <span class="keyword">if</span>(target.addEventListener){
        target.addEventListener(<span class="class"><span class="keyword">type</span>, <span class="title">handler</span>, <span class="title">false</span>);</span>
    }<span class="keyword">else</span>{
        target.attachEvent(<span class="string">"on"</span> + <span class="class"><span class="keyword">type</span>, <span class="title">handler</span>);</span>
    }<span class="keyword">else</span>{
        target[<span class="string">"on"</span> + <span class="class"><span class="keyword">type</span>] =</span> handler;
    }
}
</pre></td></tr></table></figure><br>我们常常像下面这样来使用这个方法<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span><span class="params">()</span>{</span>
    <span class="comment">//代码</span>
}
<span class="keyword">var</span> btn = document.getElementById(<span class="string">"action-btn"</span>);
addListener(btn, <span class="string">"click"</span>, doSomething);
</pre></td></tr></table></figure><br>如果你用了 <strong>JavaScript 类库</strong>，可以使用类库提供的方法来给元素挂载事件处理程序<br>这里给出一些流行类库中的实例代码。<br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>// YUI
<span class="built_in">Y</span><span class="preprocessor">.one</span>(<span class="string">"#action-btn"</span>)<span class="preprocessor">.on</span>(<span class="string">"click"</span>, doSomething)<span class="comment">;</span>
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">// jQuery</span>
$(<span class="string">"#action-btn"</span>).on(<span class="string">"click"</span>, doSomething);
</pre></td></tr></table></figure><br><figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">// Dojo</span>
<span class="keyword">var</span> btn = dojo.byId(<span class="string">"action-btn"</span>);
dojo.connect(btn, <span class="string">"click"</span>, doSomething);
</pre></td></tr></table></figure>

<p><strong>评价</strong>：优势在于，函数doSomething()的定义和事件处理程序绑定都是在一个文件中完成的。如果函数名称需要修改，则只需修改一个文件；<br>如果点击事件发生时想额外做些动作，也只需在一处做修改。<br><strong>优点</strong>：不需同时修改多个文件，可维护性提高，实现了松耦合。</p>
<h4 id="方式三_（不好）：HTML中内联的脚本代码">方式三 （不好）：HTML中内联的脚本代码</h4>
<p>在HTML中使用&lt;script&gt;标签，标签内包含内联的脚本代码。</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="comment">&lt;!-- 不好的写法 --&gt;</span>
<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript">
    doSomething();
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong>评价</strong>：最好将所有JavaScript代码都放入外置文件中，以确保在HTML代码中不会有内联的JavaScript代码，利于调试。<br><strong>缺点</strong>：不利于确信（而非猜测）从何下手调试bug</p>
]]></content>
    
    
      <category term="javascript" scheme="http://weibo.com/u/1649298213/tags/javascript/"/>
    
      <category term="前端" scheme="http://weibo.com/u/1649298213/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="笔记" scheme="http://weibo.com/u/1649298213/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="书" scheme="http://weibo.com/u/1649298213/tags/%E4%B9%A6/"/>
    
      <category term="实践" scheme="http://weibo.com/u/1649298213/tags/%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="读书笔记" scheme="http://weibo.com/u/1649298213/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello My Blog]]></title>
    <link href="http://weibo.com/u/1649298213/2014/05/18/hello-my-blog/"/>
    <id>http://weibo.com/u/1649298213/2014/05/18/hello-my-blog/</id>
    <published>2014-05-18T14:50:49.000Z</published>
    <updated>2014-06-02T06:55:05.000Z</updated>
    <content type="html"><![CDATA[<p>这是<strong>我的blog </strong>，我正在创建第一篇日志。<br>今后的博客的测试什么的也将在这篇博客里尝试~</p>
<p>我要在这开始我的博客之旅咯…</p>
<p>最重要的代码神马的这样写…</p>
<figure class="highlight {bash}"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>console.<span class="keyword">log</span>(<span class="string">"hello world"</span>);
</pre></td></tr></table></figure>
]]></content>
    
    
      <category term="我" scheme="http://weibo.com/u/1649298213/tags/%E6%88%91/"/>
    
      <category term="日记" scheme="http://weibo.com/u/1649298213/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="生活" scheme="http://weibo.com/u/1649298213/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="生活随笔" scheme="http://weibo.com/u/1649298213/categories/%E7%94%9F%E6%B4%BB%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
